<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>plan âž” space</title>
    <link>http://planspace.org/</link>
    <description>plan space from outer nine</description>
    <language>en-us</language>
    <atom:link href="http://planspace.org/rss.xml" rel="self" type="application/rss+xml" />
<item>
<title>Books for Programmers</title>
<description><![CDATA[

<p>Someone found my email address on <a href="https://github.com/">github</a> and wrote asking me to recommend books about software development. Well, here is one book on software development in general, and roughly one book each in connection with Python, JavaScript, Clojure, R, and git.</p>
<hr>
<h3>Software development in general</h3>
<p>Some years ago a mentor lent me a copy of <a href="https://pragprog.com/book/tpp/the-pragmatic-programmer">The Pragmatic Programmer</a>. It is a very useful collection of The Right Way to do things. It's a set of ground rules for doing good work that can make you and the people you work with more effective.</p>
<p><a href="https://pragprog.com/book/tpp/the-pragmatic-programmer"><img alt="The Pragmatic Programmer" src="prag_prog.jpg"></a></p>
<p>For more books on software development "in general", it looks like <a href="http://blog.codinghorror.com/recommended-reading-for-developers/">Atwood's list</a> is quite good. I should read some of those. He even lists Tufte!</p>
<hr>
<h3>Python</h3>
<p>I encountered <a href="http://greenteapress.com/wp/think-python-2e/">Think Python</a> and the rest of Downey's books while teaching some data science courses. It's a nice intro to computer science, programming, and Python, and it's available for free online.</p>
<p><a href="http://greenteapress.com/wp/think-python-2e/"><img alt="Think Python" src="think_python.jpg"></a></p>
<hr>
<h3>JavaScript</h3>
<p>If you want an intro to programming and JavaScript, I think everyone agrees that <a href="http://eloquentjavascript.net/">Eloquent JavaScript</a> is the right book. If you know how to program and want the dense low-down on JavaScript, the classic is <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript: The Good Parts</a>. There's probably more modern stuff because now you can start a whole company and even convince people to fund you, all with JavaScript. But here's a book I actually read:</p>
<p><a href="http://shop.oreilly.com/product/0636920028857.do">Functional JavaScript</a> covers interesting functional programming techniques with JavaScript and the <a href="http://underscorejs.org/">underscore</a> library. I liked the content, but I also liked the writing so much that I looked for more by the author, which is what led me to the Clojure book below.</p>
<p><img alt="Functional JavaScript" src="functional_js.gif"></p>
<hr>
<h3>Clojure</h3>
<p><a href="https://clojure.org/">Clojure</a> is a neat language, and <a href="http://www.joyofclojure.com/">The Joy of Clojure</a> is a neat book. There is a ton to learn. It's "a Clojure book", but as the subtitle, "Thinking the Clojure Way", indicates, the language and the book are not bashful about philosophy, and it's a different philosophy from a lot of other languages and ways of thinking. Use and appreciate functional programming with immutable data structures.</p>
<p><a href="http://www.joyofclojure.com/"><img alt="The Joy of Clojure" src="joy_of_clojure.png"></a></p>
<hr>
<h3>R</h3>
<p>Years back I loved <a href="https://www.nostarch.com/artofr.htm">The Art of R Programming</a> for acknowledging that you need to program in R. Some books treat R like it's a statistics GUI that, for reasons unknown, you happen to have to type to use.</p>
<p>Nowadays I think Hadley's freely available <a href="http://adv-r.had.co.nz/">Advanced R</a> is by far the best R book. Despite the title, it does also cover introductory material, but the pace is quicker and the depth is greater than The Art of R Programming.</p>
<p><a href="http://adv-r.had.co.nz/"><img alt="Advanced R" src="advanced_r.jpg"></a></p>
<hr>
<h3>git</h3>
<p><a href="https://git-scm.com/">git</a> is not a language, it's a version control tool, but I'm including it here because there's an obvious book for it which is free online. It's called <a href="https://git-scm.com/book/en/v2">Pro Git</a>. Newcomers to git sometimes find git confusing, and there's a simple solution: read the book. Read the whole book. Just read it.</p>
<p><a href="https://git-scm.com/book/en/v2"><img alt="Pro Git" src="pro_git.jpg"></a></p>
<hr>
<p>See also <a href="/20160320-books_for_professionals/">Books for Professionals</a>.</p>    
    ]]></description>
<link>http://planspace.org/20160322-books_for_programmers/</link>
<guid>http://planspace.org/20160322-books_for_programmers/</guid>
<pubDate>Tue, 22 Mar 2016 12:00:00 -0500</pubDate>
</item>
<item>
<title>Books for Professionals</title>
<description><![CDATA[

<p>My sister started her first post-graduate job last year. She asked me to recommend books on how to be a professional.</p>
<p>In my opinion, "being a professional" has at least two meanings:</p>
<ol>
<li>In general, (a) <strong>working effectively</strong> (b) <strong><em>with people</em></strong>.</li>
<li>In particular, being an expert in your specific field.</li>
</ol>
<p>Here are four picks regarding general professionalism.</p>
<hr>
<h3>(a) <strong>working effectively</strong></h3>
<p>I recommend <a href="https://en.wikipedia.org/wiki/How_to_Live_on_24_Hours_a_Day">How to Live on 24 Hours a Day</a> by Arnold Bennett. You can read it for free <a href="http://www.gutenberg.org/ebooks/2274">online via Project Gutenberg</a>.</p>
<p><img alt="How to Live on 24 Hours a Day" src="how_to_live_on_24_hours_a_day.jpeg"></p>
<p>I also highly recommend <a href="http://bitliteracy.com/">Bit Literacy</a>, which is a little old now but still relevant especially regarding how to handle email. You can read it for free <a href="http://itunes.apple.com/us/book/isbn9780979368103">in the iBookstore</a>.</p>
<p><img alt="Bit Literacy" src="bit_literacy.gif"></p>
<hr>
<h3>(b) <em>with people</em></h3>
<p>If you've never read <a href="https://en.wikipedia.org/wiki/How_to_Win_Friends_and_Influence_People">How to Win Friends and Influence People</a>, you should. I don't think it would be very surprising to you, since you're already so well-friended and influential, but it is a sort of classic and worth checking out. Looks like they're still trying to <a href="http://www.amazon.com/How-Win-Friends-Influence-People/dp/0671027034">sell it</a>.</p>
<p><img alt="How to Win Friends and Influence People" src="how_to_win_and_influence.jpg"></p>
<p>I also recently (well, last November) read <a href="http://shop.oreilly.com/product/0636920042372.do">Debugging Teams</a> and thought it was pretty good. I wrote <a href="http://planspace.org/20151118-debugging_teams/">some stuff</a> about it and pulled out quotes. The book is <a href="http://www.amazon.com/Debugging-Teams-Productivity-through-Collaboration/dp/1491932058">for sale</a>.</p>
<p><img alt="Debugging Teams" src="debugging_teams.png"></p>
<hr>
<p>Where is the line between competency that should be expected of everyone and area of specialist knowledge? This may be particularly confused by so-called "business books", some of which are about being effective in any role, some of which are specifically about "management", and all of which want to sell as many copies as possible at the airport. I suspect that most are weakly rehashing some of the above titles.</p>
<hr>
<p>See also <a href="/20160322-books_for_programmers/">Books for Programmers</a>.</p>    
    ]]></description>
<link>http://planspace.org/20160320-books_for_professionals/</link>
<guid>http://planspace.org/20160320-books_for_professionals/</guid>
<pubDate>Sun, 20 Mar 2016 12:00:00 -0500</pubDate>
</item>
<item>
<title>Moments of Impact</title>
<description><![CDATA[

<p>This is a well-wrought business book about how to lead workshops.</p>
<p><a href="http://www.amazon.com/Moments-Impact-Strategic-Conversations-Accelerate/dp/1451697627"><img alt="Moments of Impact" src="cover.png"></a></p>
<p>When I got it, I thought this book was about negotiation: how to have
conversations that advance your aims. Really by "strategic
conversations" the authors mean "conversations about strategy" and
care mostly about getting business executives to work together.</p>
<p>In addition to open-ended "let's find a new direction" meetings, the
authors spend a lot of time on what are really questions of education.
Their guidance is similar to that for running an effective class
discussion, setting up small group work, or orchestrating experiential
learning.</p>
<p>It would be interesting to know what the effect would be of devoting
similar resources toward educating children as toward educating
executives.</p>
<p>The subtitle, "How to design strategic conversations that accelerate
change", includes the main term the authors are trying to advance:
"strategic conversations". I think that in a field with little in the
way of new ideas, authors of business books thrive to the extent that
they get their phrases to stick. The authors even focus on this kind
of phrase-finding in the contents of the book, and I think there's
something to it.</p>
<p>The book follows its outline very tightly, and its core outline is this:</p>
<blockquote>
<p><strong>Core principles and key practices</strong></p>
<ol>
<li>Define your purpose<ul>
<li>Seize your moment</li>
<li>Pick one purpose</li>
<li>Go slow to go fast</li>
</ul>
</li>
<li>Engage multiple perspectives<ul>
<li>Assemble a dream team</li>
<li>Create a common platform</li>
<li>Ignite a controlled burn</li>
</ul>
</li>
<li>Frame the issues<ul>
<li>Stretch (don't break) mind-sets</li>
<li>Think inside <em>different</em> boxes</li>
<li>Choose a few key frames</li>
</ul>
</li>
<li>Set the scene<ul>
<li>Make your space</li>
<li>Get visual</li>
<li><em>Do</em> sweat the small stuff</li>
</ul>
</li>
<li>Make it an experience<ul>
<li>Discover, don't tell</li>
<li>Engage the whole person</li>
<li>Create a narrative arc</li>
</ul>
</li>
</ol>
</blockquote>
<p>They go through that outline in book form in the first 170 pages, and
then again in a "starter kit" (think "CliffsNotes") in the next 60
pages. Frustratingly, very occasionally it seems like things appear in
the "starter kit" but not the long form text. Together, the two parts
make for a very pleasantly-dimensioned physical book.</p>
<p>A couple quotes:</p>
<blockquote>
<p>It's not always easy to point out the obvious so that people will
see it. (p. 92)</p>
<p>"Desire, not goal-directedness," [Professor Jeanne Lidtka of the University of Virginia's Darden School of Business] <a href="https://hbr.org/product/beyond-strategic-thinking-strategy-as-experienced/ROT127-PDF-ENG">writes</a>, "is the true driver of behavioral change." (p. 138)</p>
<p>Org charts are a hoax (p. 142)</p>
<p>... experience is not just the best teacher - it's the only one. (p. 163)</p>
</blockquote>
<p>The book is really quite nicely designed by <a href="http://minesf.com/">Mine</a>. Mine has a <a href="https://www.youtube.com/embed/vdGuEwZb378">bboy demo reel</a>.</p>    
    ]]></description>
<link>http://planspace.org/20160215-moments_of_impact/</link>
<guid>http://planspace.org/20160215-moments_of_impact/</guid>
<pubDate>Mon, 15 Feb 2016 12:00:00 -0500</pubDate>
</item>
<item>
<title>How I Blog, or, Colophon</title>
<description><![CDATA[

<p>I recently received a friendly email, including:</p>
<blockquote>
<p>... tell me what your development stack is for your blog, especially
your backend language and the frontend framework that you used. I
find your code snippets awesome. How did you embed them in your
blog?</p>
</blockquote>
<p>Thanks for asking!</p>
<p>Everything that is my blog, and I do mean everything, lives in
<a href="https://github.com/ajschumacher/ajschumacher.github.io/">one git repo</a>
and is (in the large) entirely custom.</p>
<p>In the past, I had blogs on <a href="https://www.blogger.com/">Blogger</a> and
then <a href="https://wordpress.com/">WordPress.com</a>. My domain name used to
point to my WordPress site.</p>
<p>I wanted more flexibility and control, and I didn't want to be tied to
any specific provider. I didn't want my writing to be floating around
in precarious databases; I wanted it all in version control.</p>
<p>My blog is static. It has no database or backend language, and can be
served by any conventional HTTP server. It is currently served via
<a href="https://pages.github.com/">GitHub Pages</a>.</p>
<p>I looked at a couple standard
<a href="https://www.staticgen.com/">static site generators</a> and decided that
I hated them all. My main complaint was that I didn't want to put what
<a href="http://jekyllrb.com/">Jekyll</a> calls "front matter" in my posts.</p>
<p>I wanted to write just
<a href="https://daringfireball.net/projects/markdown/">markdown</a>, usually. I
wanted as much as possible to not be tied to a particular static site
generator. And I like the idea of having a single and simple source of
truth. I even considered <a href="https://github.com/Xeoncross/jr">Jr</a>, the
"static static site generator", because it doesn't even generate HTML
files, but there you have to put a <code>&lt;script&gt;</code> tag in every post, which
is annoying and sort of an ugly hack anyway. (View source at the
<a href="http://xeoncross.github.io/jr/">Jr demo</a> to see what I mean.)</p>
<p>More or less, I thought about how I wanted to write a blog post, and
then wrote a Python script to make it work.</p>
<p>Here's my blogging process. I go to my local blog repo directory,
start a local web server, and make a new subdirectory:</p>
<pre><code class="language-bash">cd ~/ajschumacher.github.io/
python -m SimpleHTTPServer
mkdir 20160209-how_i_blog
cd 20160209-how_i_blog</code></pre>

<p>Everything for a post goes in the post directory. That includes
(usually) a markdown file and a generated HTML file, any images that
appear in the post, and (more rarely) other HTML, JavaScript, and so
on. I really like having <em>everything</em> together in that directory. I
don't want to have to coordinate across multiple directories when I'm
writing a post, and I want each post to be self-contained when it's
finished.</p>
<p>I put the date of the post in the directory name. My Python script
finds that date and inserts it into the generated HTML, which will be
<code>index.html</code> in the post's directory.</p>
<p>It's an HTTP server convention to serve <code>index.html</code> when you request
the directory; this mechanism satisfies my preference for having
semantic URLs without artifacts of an underlying technology. Think
about how you feel when you're at a <code>.aspx</code> URL. Gross.</p>
<pre><code class="language-bash">emacs index.md</code></pre>

<p>I edit <code>index.md</code> in the post's directory. The only rule is that the
first line is the title. My Python script looks for that line to make
into the headline in <code>index.html</code>, above the date.</p>
<p>My blog is put together mostly by one script, <a href="https://github.com/ajschumacher/ajschumacher.github.io/blob/master/make_page.py">make_page.py</a>. It uses a <a href="https://pypi.python.org/pypi/Markdown">Python implementation of markdown</a>, plus a custom hack to support <a href="https://help.github.com/articles/creating-and-highlighting-code-blocks/">GitHub-style fenced code blocks</a>, which I like. I also hack around to support <a href="https://www.latex-project.org/">LaTeX</a>-style equations via <a href="https://www.mathjax.org/">MathJax</a>, so I can write \(e^{i\pi}+1=0\) as easily as <code>\\(e^{i\pi}+1=0\\)</code>.</p>
<p>For presentations, I wanted to be able to write a single markdown file and then have both an article for reading and slides for presenting. So if <code>make_page.py</code> sees any lines with just five hyphens, it recognizes them as demarcating a slide, and then generates a <a href="https://github.com/tmcw/big">big</a> HTML/JS-based presentation in <code>big.html</code>. For example, you can <a href="http://planspace.org/20141117-well_used_simple_tools/">read this</a>, but if I'm giving it as a presentation I can <a href="http://planspace.org/20141117-well_used_simple_tools/big.html">show this</a>. Spoiler alert: If you type the <a href="http://code.snaptortoise.com/konami-js/">Konami code</a> from the <a href="http://planspace.org/20141117-well_used_simple_tools/">post</a>, it automatically takes you to the <a href="http://planspace.org/20141117-well_used_simple_tools/big.html">slides version</a>.</p>
<p>The styling for my blog is a hodge-podge of CSS, with main colors the inverse of the <a href="https://github.com/bbatsov/zenburn-emacs">Zenburn</a> color scheme. I use <a href="https://highlightjs.org/">highlight.js</a> to make code blocks looks nice. I like highlight.js a lot, except that it colors some things I wish it wouldn't, like the numbers in the code block above. Spoiler alert: I use <a href="https://elrumordelaluz.github.io/csshake/">CSShake</a> to make the arrow at the top of my <a href="/">root page</a> move around when you mouse over it.</p>
<p>I eventually wrote <a href="https://github.com/ajschumacher/ajschumacher.github.io/blob/master/make_rss.py">make_rss.py</a>, which generates an <code>rss.xml</code> file. Somebody told me they liked RSS. I'm not completely sure it totally works with images and relative paths and so on, or that anybody uses RSS any more.</p>
<p>I guess I'll mention that I use <a href="https://www.google.com/analytics/">Google Analytics</a> so I can see if anybody goes to my blog. Some people do. It gets more visitors than my old <a href="http://www.naldaramjui.com/">naldaramjui</a> project, but fewer pageviews. Just a few posts generate the bulk of the visits, and usually not the best ones.</p>
<p>Oh, remember those old Blogger and WordPress blogs I had? I exported them to XML and then wrote scripts to convert that content to work with my current system. It was annoying, but I was able to preserve the URLs from the WordPress blog, so I was pretty happy about that.</p>
<p>I usually write most of a post, and then revise while iteratively building it and looking at how it looks in a browser. This is sort of too much work, but I feel like the distance I get by switching from editor to browser helps me to see what I'm writing with fresh eyes, to some extent. So I'll run this many times, switching to a browser and then back to editor between runs:</p>
<pre><code class="language-bash">../make_page.py</code></pre>

<p>Since switching to my current blog system, updates to the <a href="/">index</a>
listing all my posts are always done manually. This is, again, more
work than it really needs to be, but it gives me very explicit control
over what appears in that index and how. (Not that I'm very creative
about it.)</p>
<p>So after all the edits to markdown files are complete, the release
process for a new post goes like this:</p>
<pre><code class="language-bash">../make_page.py
git add index.md index.html  # and any other files for the post
cd ..
./make_page.py
git add index.md index.html  # this is the root index
./make_rss.py
git add rss.xml
git commit -m 'new post about how my blog works'
git push</code></pre>

<p>And that's all there is to it! I do use <a href="https://github.com/ajschumacher/ajschumacher.github.io/issues">github issues</a> to keep track of post and other blog enhancement ideas, but I also put a lot of things there and never return to them.</p><!-- mathjax for formulas -->

    ]]></description>
<link>http://planspace.org/20160209-how_i_blog/</link>
<guid>http://planspace.org/20160209-how_i_blog/</guid>
<pubDate>Tue, 09 Feb 2016 12:00:00 -0500</pubDate>
</item>
<item>
<title>Talk Like TED</title>
<description><![CDATA[

<p>There are some useful points in this book, but I don't like the book as a whole very much.</p>
<p><a href="http://gallocommunications.com/books/talk-like-ted-2/"><img alt="Talk Like TED" src="cover.jpg"></a></p>
<p>I think <a href="https://www.ted.com/">TED</a> talks are now recognized as being more consistently well-presented than truly profound, though both aspects have been diluted by time and <a href="https://www.ted.com/about/programs-initiatives/tedx-program">TEDx</a>. The book is about how to present, and not how to construct a sound argument or make a meaningful discovery, so I shouldn't be as critical as I feel. It's rare that I read something so far from my natural position on the analytical/emotional spectrum, and it wasn't totally pleasant.</p>
<p>My reaction started from the cover blurbs, with the unmeasured hyperbole in one from Guy Kawasaki: "The premise of this book&#8212;that TED talks provide great examples and lessons&#8212;is a magnificent insight." I would wonder whether it was intended as a sarcastic jab at TED and the book, but Kawasaki is a marketer of some repute. Has he learned that referring to occasionally valid observations as magnificent insights is useful?</p>
<p>A repeated opening argument from the author is that "Ideas are the true currency of the twenty-first century. So, in order to succeed you need to be able to sell your ideas and yourself persuasively." Those familiar with currency will note that you don't generally need to convince anyone to take it; the book's argument here is ridiculous, but it may be that the illogical presentation is more palatable than a more honest phrasing: "Most people have very little sense, so a practical way to succeed is to focus a lot on selling your ideas and yourself persuasively, regardless of the quality of you and your ideas."</p>
<p>The second chapter is called "Master the Art of Storytelling". I have to agree that using stories in speaking is a good idea for connecting to audiences and making points emotionally, but I also object because anecdotes are almost never useful grounds for drawing conclusions and as a person who looks at data a lot, a common reaction to a story as part of someone's argument is the feeling that they are probably wrong, deliberately lying, or both. But as the author says, "Abstractions are difficult for most people to process. Stories turn abstract concepts into tangible, emotional, and memorable ideas."</p>
<p>The author helpfully presents Aristotle's persuasion framework: ethos (credibility), logos (logic), and pathos (emotion). My usual bias is toward logic, and credibility only as much as it measures a person's historical record on logic. But the author is correct that emotion and other kinds of credibility are significant, and I shouldn't ignore them when communicating.</p>
<p>So I read this book in a state of displeased agreement, disliking the author from the start, whether he was playing fast and loose with propositions and conclusions, advertising his consulting business, or just titling all his books like BuzzFeed listicles. But I realized that his advice was frequently advice I could benefit from following. I just couldn't stand sentences like this one on page 27: "Academically, if you can't measure something you cannot quantify what it actually does." At some point, I gave up counting things like that.</p>
<p>I was very interested to learn of the <a href="http://m.ragan.com/Main/Articles/Speakers_follow_the_10_TED_Commandments_48603.aspx">Ten TED Commandments</a> that are sent to presenters while they're preparing:</p>
<ol>
<li>Thou shalt not simply trot out thy usual shtick.</li>
<li>Thou shalt dream a great dream, or show forth a wondrous new thing, or share something thou hast never shared before.</li>
<li>Thou shalt reveal thy curiosity and thy passion.</li>
<li>Thou shalt tell a story.</li>
<li>Thou shalt freely comment on the utterances of other speakers for the sake of blessed connection and exquisite controversy.</li>
<li>Thou shalt not flaunt thine ego. Be thou vulnerable; speak of thy failure as well as thy success.</li>
<li>Thou shalt not sell from the stage: neither thy company, thy goods, thy writings, not thy desperate need for funding; lest thou be cast aside into outer darkness.</li>
<li>Thou shalt remember all the while: Laughter is good.</li>
<li>Thou shalt not read thy speech.</li>
<li>Thou shalt not steal the time of them that follow thee.</li>
</ol>
<p><em>Talk Like TED</em> doesn't actually include the Ten TED Commandments; I had to go find them online. I imagine they weren't included because the author didn't want them to clash with his own list. Here's an annotated <em>Talk Like TED</em> table of contents, with its three parts with three chapters each. As a fun exercise, map the Ten TED Commandments onto <em>Talk Like TED</em>'s chapters!</p>
<ol>
<li>Emotional<ol>
<li><strong>Unleash the Master Within</strong> I was optimistic about this chapter because it comes close to saying "Talk about something you actually know about." It focuses a lot on passion.</li>
<li><strong>Master the Art of Storytelling</strong> People like stories. People remember stories. Tell stories.</li>
<li><strong>Have a Conversation</strong> This chapter is actually about having your presentation be technically perfect: well practiced, well delivered, etc. It's really astonishingly far from advocating engaging the audience in real conversation. The book is about one-directional communication, and no surprise; that's the TED format and the format of most things that are thought of as presentations.</li>
</ol>
</li>
<li>Novel<ol>
<li><strong>Teach Me Something New</strong> Again I like the idea of this chapter as it relates to choosing your content, but a lot of this chapter is also about giving your talk a Twitter-friendly headline.</li>
<li><strong>Deliver Jaw-Dropping Moments</strong> Be creative and do interesting things! But also speak in soundbites and be quotable on Twitter.</li>
<li><strong>Lighten Up</strong> This is the chapter on using humor. People like humor!</li>
</ol>
</li>
<li>Memorable<ol>
<li><strong>Stick to the 18-Minute Rule</strong> No strong rationale for 18 minutes exactly, but the point of being brief is a good one. There's also a lot in here about following the rule of three.</li>
<li><strong>Paint a Mental Picture with Multisensory Experiences</strong> This probably could have been a section in the storytelling chapter.</li>
<li><strong>Stay in Your Lane</strong> Be authentic.</li>
</ol>
</li>
</ol>
<p>Here are a couple other things I particularly liked:</p>
<p>Quoting Matthieu Ricard on page 26: "It is essential to inspire hope and confidence, since it is what we lack most and need most in our times."</p>
<p>For a while I've been a fan of separating what a presenter says and what appears on a projector: "Since we're all sick of 'Death by PowerPoint,' it's time to kill it permanently. Let me be clear&#8212;I'm not advocating the end of PowerPoint as a tool, but the end of traditional PowerPoint design cluttered with text and bullet points. ... The old style of PowerPoint is an anachronism on the modern corporate battlefield." <a href="https://en.wikipedia.org/wiki/Edward_Tufte">Tufte</a> has written more convincingly in <a href="http://users.ha.uth.gr/tgd/pt0501/09/Tufte.pdf">The Cognitive Style of PowerPoint</a> about the evils of bullet points as a medium.</p>
<p>Quoting John Medina on page 213: "To put it bluntly, research shows that <em>we can't multitask</em>. We are biologically of processing attention-rich inputs simultaneously." (Emphasis in original.) I sometimes hear people claiming that they can productively multitask, and I appreciate an excuse to not believe them.</p>
<p>In the end, <em>Talk Like TED</em> could be summarized as follows: people are irrational, but there are ways you can convince them of whatever you want. I am not so impressed with Carneades's ability to argue both sides of any issue and I identify more with Socrates in Gorgias: Truth is worth pursuing, and is fundamentally more important than the artifices of rhetoric. That said, I do not deny the utility of presenting good ideas well rather than poorly.</p>    
    ]]></description>
<link>http://planspace.org/20160207-talk_like_ted/</link>
<guid>http://planspace.org/20160207-talk_like_ted/</guid>
<pubDate>Sun, 07 Feb 2016 12:00:00 -0500</pubDate>
</item>
<item>
<title>Juggling for Programmers</title>
<description><![CDATA[

<p><a href="https://en.wikipedia.org/wiki/Seymour_Papert">Seymour Papert</a> wrote a book called <a href="http://www.amazon.com/Mindstorms-Children-Computers-Powerful-Ideas/dp/0465046746">Mindstorms: Children, Computers, And Powerful Ideas</a>. <a href="http://worrydream.com/">Bret Victor</a> says in <a href="http://worrydream.com/LearnableProgramming/">Learnable Programming</a> that Mindstorms is &#8220;perhaps the greatest book ever written on learning in general&#8221;.</p>
<p>Nestled in Mindstorms is juggling lesson which, it is claimed, reduces the time required to learn to juggle three balls continuously &#8220;often to as little as twenty or thirty minutes.&#8221; It took me about 40 minutes, but I was using ping pong balls, which are too light, small, and bouncy to be ideal. I have no other excuses.</p>
<p>The next section is how to juggle, from <a href="http://www.amazon.com/Mindstorms-Children-Computers-Powerful-Ideas/dp/0465046746">Mindstorms</a>.</p>
<hr>
<p>There are many different kinds of juggling. When most people think of juggling, they are thinking about a procedure that is called &#8220;showers juggling.&#8221; In showers juggling balls move one behind the other in a &#8220;circle&#8221; passing from left to right at the top and from right to left at the bottom (or vice versa). This takes two kinds of throws: a short, low throw to get the balls from hand to the other at the bottom of the &#8220;circle&#8221; (near the hands) and a long, high throw to get the balls to go around the top of the circle. (See Figure 11.)</p>
<p><img alt="Figure 11: Two Forms of Juggling" src="figure_11.png"></p>
<p>Cascade juggling has a simpler structure. There is no bottom of the circle; balls travel in both directions over the upper arc. There is only one kind of toss: a long and high one. (See Figure 11.) Its simplicity makes it a better route into juggling as well as a better example for our argument. Our guiding question is this: Will someone who wishes to learn cascade juggling be helped or hindered by a verbal, analytic description of how to do it? The answer is: It all depends. It depends on what materials the learner has for making analytic descriptions. We use cascade juggling to show how good computational models can help construct &#8220;people procedures&#8221; that improve performance of skills and how reflection on those people procedures can help us learn to program and to do mathematics. But, of course, <em>some</em> verbal descriptions will confuse more than they will help. Consider, for example, the description:</p>
<ol>
<li>Start with balls 1 and 2 in the left hand and ball 3 in the right.</li>
<li>Throw ball 1 in a high parabola to the right hand.</li>
<li>When ball 1 is at the vertex throw ball 3 over to the left hand in a similar high parabola, but take care to toss ball 3 under the trajectory of ball 1.</li>
<li>When ball 1 arrives at the right hand and ball 3 is at the vertex, catch ball 1 and throw ball 2 in a trajectory under that of ball 3, and so on.</li>
</ol>
<p>This description is basically a brute-force straight-line program. It is not a useful description for the purpose of learning. People outside the computer culture might say it is too much like a computer program, &#8220;just one instruction after another.&#8221; It is like certain programs, for example Keith's first <code>MAN</code> program. But we have seen that stringing instructions together without good internal structure is not a good model for computer programming either, and we shall see that the techniques of structured programming that <em>are</em> good for writing programs are also good as mathetic descriptions of juggling.</p>
<p>Our goal is to create a people procedure: <code>TO JUGGLE</code>. As a first step toward defining this procedure we identify and name subprocedures analogous to their role to the subprocedures Keith used in drawing his stick figure (<code>TO VEE</code>, <code>TO HEAD</code>, <code>TO LINE</code>). In the case of juggling, a natural pair of subprocedures is what we call <code>TOSSRIGHT</code> and <code>TOSSLEFT</code>. Just as the command <code>VEE</code> was defined functionally by the fact that it causes the computer to place a certain V-shaped figure on the screen, the command <code>TOSSLEFT</code> given to our apprentice juggler should &#8220;cause&#8221; him to throw a ball, which we assume he is holding in his left hand, over to the right hand.</p>
<p>But there is an important difference between programming <code>TO MAN</code> and programming <code>TO JUGGLE</code>. The programmer of <code>TO MAN</code> need not worry about timing, but in setting up the procedure for juggling we <em>must</em> worry about it. The juggler must perform the actions <code>TOSSRIGHT</code> and <code>TOSSLEFT</code> at appropriate moments in a cycle, and the two actions will have to overlap in time. Since we have chosen to include the catching phase in the same subprocedure as the throwing phase, the procedure <code>TOSSRIGHT</code> is meant to include catching the ball when it comes over to the left hand. Similarly, <code>TOSSLEFT</code> is a command to throw a ball from the left hand over to the right and catch it when it arrives.</p>
<p>Since most people can perform these actions, we shall take <code>TOSSLEFT</code> and <code>TOSSRIGHT</code> as given and concentrate on how they can be combined to form a new procedure we shall call <code>TO JUGGLE</code>. Putting them together is different in one essential way from the combination of subprocedures <code>TO VEE</code> and <code>TO HEAD</code> to make the procedure <code>TO MAN</code>. <code>TOSSLEFT</code> might have to be initiated before the action initiated by the previous <code>TOSSRIGHT</code> is completed. In the language of computer science, this is expressed by saying that we are dealing with <em>parallel</em> processes as opposed to the strictly <em>serial</em> processes used in drawing the stick figure.</p>
<p>To describe the combination of the subprocedures we introduce a new element of programming: The concept of a &#8220;<code>WHEN DEMON</code>.&#8221; This is illustrated by the instruction: <code>WHEN HUNGRY EAT</code>. In one version of LOGO this would mean: Whenever the condition called <code>HUNGRY</code> happens, carry out the action called <code>EAT</code>. The metaphor of a &#8220;demon&#8221; expresses the idea that the command creates an autonomous entity within the computer system, one that remains dormant until a certain kind of event happens, and then, like a demon, it pounces out to perform its action. The juggling act will use two such <code>WHEN DEMONS</code>.</p>
<p>Their definitions will be something like:</p>
<pre><code>WHEN something TOSSLEFT
WHEN something TOSSRIGHT</code></pre>

<p>To fill the blanks, the &#8220;somethings,&#8221; we describe two conditions, or recognizable states of the system, that will trigger the tossing action.</p>
<p>At a key moment in the cycle the balls are disposed about like this (Figure 12):</p>
<p><img alt="Figure 12" src="figure_12.png"></p>
<p>But this diagram of the state of the system is incomplete since it fails to show in which direction the top ball is flying. To complete it we add arrows to indicate a direction (Figure 13a) and obtain two state descriptions (Figures 13b and 13c).</p>
<p><img alt="Figure 13a" src="figure_13a.png"></p>
<p><img alt="Figure 13b: TOPRIGHT: The ball is at the top and is moving to the right" src="figure_13b.png"></p>
<p><img alt="Figure 13c: TOPLEFT: The ball is at the top and is moving to the left" src="figure_13c.png"></p>
<p>If we assume, reasonably, that the juggler can recognize these two situations, the following formalism should be self-explanatory:</p>
<pre><code>TO KEEP JUGGLING
WHEN TOPRIGHT TOSSRIGHT
WHEN TOPLEFT TOSSLEFT</code></pre>

<p>or even more simply:</p>
<pre><code>TO KEEP JUGGLING
WHEN TOPX TOSSX</code></pre>

<p>which declares that when the state <code>TOPRIGHT</code> occurs, the right hand should initiate a toss and when <code>TOPLEFT</code> occurs, the left hand should initiate a toss. A little thought will show that this is a complete description: The juggling process will continue in a self-perpetuating way since each toss creates a state of the system that triggers the next toss.</p>
<p>How can this model that turned juggling into a <em>people procedure</em> be applied as a teaching strategy? First, note that the model of juggling made several assumptions:</p>
<ol>
<li>that the learner can perform <code>TOSSRIGHT</code> and <code>TOSSLEFT</code></li>
<li>that she can recognize the trigger states <code>TOPLEFT</code> and <code>TOPRIGHT</code></li>
<li>that she can combine these performance abilities according to the definitions of the procedure <code>TO KEEP JUGGLING</code></li>
</ol>
<p>Now, we translate our assumptions and our people procedures into a teaching strategy.</p>
<p>STEP 1: Verify that the learner <em>can</em> toss. Give her one ball, ask her to toss it over into the other hand. This usually happens smoothly, but we will see later that a minor refinement is often needed. The spontaneous procedure has a bug.</p>
<p>STEP 2: Verify that the learner can combine tosses. Try with two balls with instructions:</p>
<pre><code>TO CROSS
TOSSLEFT
WHEN TOPRIGHT TOSSRIGHT
END</code></pre>

<p>This is intended to exchange the balls between left and right hands. Although it appears to be a simple combination of <code>TOSSLEFT</code> and <code>TOSSRIGHT</code>, it usually does not work immediately.</p>
<p>STEP 3: Look for bugs in the toss procedures. Why doesn't <code>TO CROSS</code> work? Typically we find that the learner's ability to toss is not really as good as it seemed in step 1. The most common deviation or &#8220;bug&#8221; in the toss procedure is following the ball with the eyes in doing a toss. Since a person has only one pair of eyes, their engagement in the first toss makes the second toss nearly impossible and thus usually ends in disaster with the balls on the floor.</p>
<p>STEP 4: Debugging. Assuming that the bug was following the first ball with the eyes, we debug by returning our learner to tossing with one ball without following it with her eyes. Most learners find (to their amazement) that very little practice is needed to be able to perform a toss while fixing the eyes around the expected apex of the parabola made by the flying ball. When the single toss is debugged, the learner again tries to combine two tosses. Most often this now works, although there may still be another bug to eliminate.</p>
<p>STEP 5: Extension to three balls. Once the learner can smoothly execute the procedure we called <code>CROSS</code>, we go on to three balls. To do this beings with two balls in one hand and one in the other (Figure 14).</p>
<p>Ball 2 is tossed as if executing <code>CROSS</code>, ignoring ball 1. The <code>TOSSRIGHT</code> in <code>CROSS</code> brings the three balls into a state that is ready for <code>KEEP JUGGLING</code>. The transition from <code>CROSS</code> to <code>KEEP JUGGLING</code> presents a little difficulty for some learners, but this is easily overcome. Most people can learn to juggle in less than half an hour by using this strategy.</p>
<p><img alt="Figure 14: Cascade Juggling" src="figure_14.png"></p>
<p>Variants of this teaching strategy have been used by many LOGO teachers and studied in detail by one of them, Howard Austin, who took the analysis of juggling as the topic of his Ph.D. thesis. There is no doubt that the strategy is very effective and little doubt as to the cause: The use of programming concepts as a descriptive language facilitates debugging.</p>
<hr>
<p>I think this, and all of <a href="http://www.amazon.com/Mindstorms-Children-Computers-Powerful-Ideas/dp/0465046746">Mindstorms</a>, is pretty cool. If nothing else, there is no longer any reason for anyone not to learn to juggle!</p>    
    ]]></description>
<link>http://planspace.org/20151231-juggling_for_programmers/</link>
<guid>http://planspace.org/20151231-juggling_for_programmers/</guid>
<pubDate>Thu, 31 Dec 2015 12:00:00 -0500</pubDate>
</item>
<item>
<title>Hearing Data with Sonic Histograms</title>
<description><![CDATA[

<p>You can see an iris, and you can smell an iris, and you can measure the <a href="https://en.wikipedia.org/wiki/Iris_flower_data_set">length and width of 150 iris sepals and petals</a>... but can you <em>hear</em> the iris data?</p>
<p><audio controls preload="auto" autobuffer>
    <source src="yes.mp3" type="audio/mpeg"></source>
    <source src="yes.ogg" type="audio/ogg"></source>
</audio></p>
<p><a href="https://en.wikipedia.org/wiki/Iris_flower_data_set"><img alt="iris" src="iris.jpg"></a></p>
<p><a href="https://en.wikipedia.org/wiki/Histogram">Histograms</a> are a great way to get a sense for the distribution of a set of values. The view you get depends on how wide your bars are.</p>
<p><img alt="two histograms" src="two_histograms.png"></p>
<p>Both those histograms look pretty good, but audio isn't so boxy. A cousin of the histogram, <a href="https://en.wikipedia.org/wiki/Kernel_density_estimation">kernel density estimation</a> (KDE) seems more like audio. Like a histogram, it can be more or less "smooth".</p>
<p><img alt="two KDEs" src="two_kdes.png"></p>
<p>Stealing the idea of KDE, we can adapt it for audio. We'll just add up audio pulses that are positioned in time to represent values.</p>
<p>We can use "wide" audio points <audio controls preload="auto" autobuffer><source src="sonic_point_wide.mp3" type="audio/mpeg"></source><source src="sonic_point_wide.ogg" type="audio/ogg"></source></audio> or "narrow" audio points <audio controls preload="auto" autobuffer><source src="sonic_point_narrow.mp3" type="audio/mpeg"></source><source src="sonic_point_narrow.ogg" type="audio/ogg"></source></audio>.</p>
<p>Combining a bunch of wide audio points, we get a "smoother" audio histogram. <audio controls preload="auto" autobuffer><source src="sonic_sepal_length_wide.mp3" type="audio/mpeg"></source><source src="sonic_sepal_length_wide.ogg" type="audio/ogg"></source></audio> And if we combine narrow audio points, we get a more "discrete" sounding histogram. <audio controls preload="auto" autobuffer><source src="sonic_sepal_length_narrow.mp3" type="audio/mpeg"></source><source src="sonic_sepal_length_narrow.ogg" type="audio/ogg"></source></audio></p>
<p>Adding an audio axis label and some sonic tick marks, we get serviceable audio histograms that you can compare to their visible counterparts.</p>
<p><audio controls preload="auto" autobuffer><source src="sonic_sepal_length.mp3" type="audio/mpeg"></source><source src="sonic_sepal_length.ogg" type="audio/ogg"></source></audio> <img alt="sepal length histogram" src="sepal_length.png"></p>
<p><audio controls preload="auto" autobuffer><source src="sonic_sepal_width.mp3" type="audio/mpeg"></source><source src="sonic_sepal_width.ogg" type="audio/ogg"></source></audio> <img alt="sepal width histogram" src="sepal_width.png"></p>
<p><audio controls preload="auto" autobuffer><source src="sonic_petal_length.mp3" type="audio/mpeg"></source><source src="sonic_petal_length.ogg" type="audio/ogg"></source></audio> <img alt="petal length histogram" src="petal_length.png"></p>
<p><audio controls preload="auto" autobuffer><source src="sonic_petal_width.mp3" type="audio/mpeg"></source><source src="sonic_petal_width.ogg" type="audio/ogg"></source></audio> <img alt="petal width histogram" src="petal_width.png"></p>
<p>So yes, it kind of works! You can certainly hear bimodality, and even differentiate between the first two distributions if you listen carefully. I probably won't switch from visualizations to sonifications, but it's a fun things to explore!</p>
<hr>
<p>Thanks to <a href="https://www.spotify.com/">Spotify</a>'s <a href="http://monthlymusichackathon.org/">Monthly Music Hackathon NYC</a> (<a href="https://twitter.com/musichackathon">@musichackathon</a>) <a href="http://monthlymusichackathon.org/post/133438271112/viz-son">Sound Visualization &amp; Data Sonification Hackathon</a> for providing the push to do this. There's <a href="http://livestream.com/accounts/5176069/events/4582831">video on Livestream</a> (I'm on from about 5:30 to 10:30) but ironically the audio doesn't seem to be working. Thanks also to <a href="https://thomaslevine.com/">Thomas Levine</a> for showing me the <a href="https://cran.r-project.org/web/packages/tuneR/index.html">tuneR</a> library for <a href="https://www.r-project.org/">R</a> which let me jump in and start making sounds really quickly.</p>
<hr>
<p>This code was hacked together quickly and is not what you'd call "production grade". It uses the Mac <code>say</code> and also <code>ffmpeg</code> via <code>system</code>, but it's otherwise <a href="play.R">R that might work for you</a> if you want to try it.</p>
<pre><code class="language-r"># install.packages("tuneR")  # install if not installed
library("tuneR")
setWavPlayer('/usr/bin/afplay')  # on Mac

point_at &lt;- function(value,  # data value
                     lowest,  # data range min
                     highest,  # data range max
                     duration,  # seconds
                     point_width,  # seconds for +/- 3 SD (points are normal)
                     point_freq=440, sample_rate=44100) {
  point_width_samples &lt;- point_width * sample_rate
  point &lt;- sine(point_freq, point_width_samples, stereo=TRUE)
  filter &lt;- dnorm(seq_along(point), mean = length(point)/2, sd = length(point)/6)
  filter &lt;- filter / max(filter)
  point &lt;- point * filter
  duration &lt;- duration * sample_rate
  data_range &lt;- highest - lowest
  left_offset &lt;- value - lowest
  peak_position &lt;- (left_offset / data_range) * duration
  left_padding_duration &lt;- peak_position - length(point)/2
  if (left_padding_duration &gt; 0) {
    result &lt;- bind(silence(left_padding_duration, stereo=TRUE), point)
  } else {
    result &lt;- point[abs(left_padding_duration):length(point)]
  }
  if (length(result) &lt; duration) {
    result &lt;- bind(result, silence(duration - length(result), stereo=TRUE))
  } else {
    result &lt;- result[1:duration]
  }
  result
}

points_at &lt;- function(values,  # data values
                      lowest,  # data range min
                      highest,  # data range max
                      duration,  # seconds
                      point_width,  # seconds for +/- 3 SD (points are normal)
                      point_freq=440, sample_rate=44100) {
  result &lt;- silence(duration * sample_rate, stereo = TRUE)
  for (value in values) {
    result &lt;- result + point_at(value, lowest, highest, duration, point_width,
                                point_freq, sample_rate)
  }
  result
}

low_high &lt;- function(values) {
  breakpoints &lt;- pretty(values)
  lowest &lt;- breakpoints[1]
  highest &lt;- breakpoints[length(breakpoints)]
  c(lowest, highest)
}

normalized_sonic_hist_content &lt;- function(values,  # data values
                                          duration=4,  # seconds
                                          point_width=0.2,  # seconds for +/1 3 SD (points are normal)
                                          point_freq=440, sample_rate=44100) {
  breakpoints &lt;- low_high(values)
  lowest &lt;- breakpoints[1]
  highest &lt;- breakpoints[2]
  content &lt;- points_at(values, lowest, highest, duration, point_width,
                       point_freq, sample_rate)
  normalize(content)
}

sonic_hist &lt;- function(values,  # data values
                       main,  # "title" of variable
                       duration=4,  # seconds
                       point_width=0.2,  # seconds for +/1 3 SD (points are normal)
                       point_freq=440,
                       legend=TRUE,
                       units="",
                       edge=TRUE, edge_freq=880, edge_duration=1000,
                       sample_rate=44100) {
  if (missing(main)) {
    main &lt;- deparse(substitute(values))
  }
  breakpoints &lt;- low_high(values)
  lowest &lt;- breakpoints[1]
  highest &lt;- breakpoints[2]
  content &lt;- normalized_sonic_hist_content(values, duration, point_width, point_freq, sample_rate)
  edge_sound &lt;- sine(edge_freq, duration=edge_duration, stereo=TRUE)
  if (edge) {
    content &lt;- bind(edge_sound, content, edge_sound)
  }
  if (legend) {
    system(paste("say", main, "in", duration, "seconds from", lowest, "to", highest, units, "-o t"))
    system("ffmpeg -i t.aiff -ar 44100 t.wav")
    legend_mono &lt;- normalize(readWave("t.wav"), pcm=FALSE)
    legend_stereo &lt;- stereo(legend_mono, legend_mono)
    system("rm t.aiff t.wav")
    content &lt;- bind(legend_stereo, content)
  }
  content
}

triple_save &lt;- function(some_wav) {
  name_prefix &lt;- deparse(substitute(some_wav))
  wav_name &lt;- paste(name_prefix, ".wav", sep='')
  mp3_name &lt;- paste(name_prefix, ".mp3", sep='')
  ogg_name &lt;- paste(name_prefix, ".ogg", sep='')
  writeWave(some_wav, wav_name)
  system(paste("ffmpeg -i", wav_name, mp3_name))
  system(paste("ffmpeg -i", wav_name, ogg_name))
  system(paste("rm", wav_name))
}

data("iris")

iris$Sepal.Length


png('two_histograms.png', width=800, height=380)
par(mfrow=c(1, 2))
hist(iris$Sepal.Length, main="sepal length histogram, default breaks")
hist(iris$Sepal.Length, breaks=100, xlim=c(4, 8), main="sepal length histogram, 100 breaks")
dev.off()

png('two_kdes.png', width=800, height=380)
par(mfrow=c(1, 2))
plot(density(iris$Sepal.Length), main="sepal length kernel density, default binwidth")
plot(density(iris$Sepal.Length, bw=0.01), main="sepal length kernel density, 0.01 binwidth")
dev.off()

sonic_point_wide &lt;- point_at(value=4, lowest=0, highest=8, duration=2, point_width=0.5)
triple_save(sonic_point_wide)
sonic_point_narrow &lt;- point_at(value=4, lowest=0, highest=8, duration=2, point_width=0.05)
triple_save(sonic_point_narrow)

sonic_sepal_length_wide &lt;- sonic_hist(iris$Sepal.Width, legend=F, edge=F, point_width=0.4)
triple_save(sonic_sepal_length_wide)
sonic_sepal_length_narrow &lt;- sonic_hist(iris$Sepal.Width, point_width=0.05, legend=F, edge=F)
triple_save(sonic_sepal_length_narrow)

sonic_tick_mark &lt;- sine(880, duration=1000, stereo=TRUE)
triple_save(sonic_tick_mark)

png("sepal_length.png", height=380, width=480)
hist(iris$Sepal.Length, main="sepal length, centimeters")
dev.off()
sonic_sepal_length &lt;- sonic_hist(iris$Sepal.Length, main="sepal length", units="centimeters")
triple_save(sonic_sepal_length)

png("sepal_width.png", height=380, width=480)
hist(iris$Sepal.Width, main="sepal width, centimeters")
dev.off()
sonic_sepal_width &lt;- sonic_hist(iris$Sepal.Width, main="sepal width", units="centimeters")
triple_save(sonic_sepal_width)

png("petal_length.png", height=380, width=480)
hist(iris$Petal.Length, main="petal length, centimeters")
dev.off()
sonic_petal_length &lt;- sonic_hist(iris$Petal.Length, main="petal length", units="centimeters")
triple_save(sonic_petal_length)

png("petal_width.png", height=380, width=480)
hist(iris$Petal.Width, main="petal width, centimeters")
dev.off()
sonic_petal_width &lt;- sonic_hist(iris$Petal.Width, main="petal width", units="centimeters")
triple_save(sonic_petal_width)</code></pre>

<hr>
<p>If you're having any problems with your sonic histograms, you can adjust them with a <a href="https://en.wikipedia.org/wiki/Sonic_screwdriver">sonic screwdriver</a>.</p>
<p><img alt="sonic screwdriver" src="sonic_screwdriver.png"></p>    
    ]]></description>
<link>http://planspace.org/20151214-hearing_data_with_sonic_histograms/</link>
<guid>http://planspace.org/20151214-hearing_data_with_sonic_histograms/</guid>
<pubDate>Mon, 14 Dec 2015 12:00:00 -0500</pubDate>
</item>
<item>
<title>How to Eat Computers</title>
<description><![CDATA[

<p><em>A ten-minute talk about &#8220;my experiences with computer science&#8221; for <a href="https://hourofcode.com/">Hour of Code</a>. Given for first, second, and third-graders at the <a href="http://www.lemanmanhattan.org/">L&#233;man Manhattan Preparatory School</a>'s <a href="http://www.lemanmanhattan.org/academics/lower">Lower School</a> on Friday December 4, 2015, and for seventh and eighth-graders at <a href="http://schools.nyc.gov/SchoolPortals/13/K113/">NYC MS 113 Ronald Edmonds Learning Center</a> on Tuesday December 8. (<a href="big.html">slides</a>)</em></p>
<p>I started with a cute demo of the <code>say</code> functionality at the Mac command line. It's much easier to get the computer to <code>say hello</code> than it used to be!</p>
<pre><code class="language-bash">say Hello!
say I am a computer.
say Please do not eat me.</code></pre>

<hr>
<p></p><center>
planspace.org
<p>@planarrowspace
</p></center>
<hr>
<p>Hi! I'm Aaron. This is my blog and <a href="https://twitter.com/planarrowspace">my twitter handle</a>. You can get from one to the other. <a href="big.html">This presentation</a> and a corresponding write-up (you're reading it) are on my blog (which you're on).</p>
<hr>
<p><img height="1000%" src="img/aaron.jpg" title="young Aaron"></p>
<hr>
<p>This is me at the beginning of my academic career.</p>
<p>Back then, my family didn't have a computer at home.</p>
<p>So how did I learn about computers?</p>
<hr>
<p>friends and family</p>
<hr>
<p>One way I was lucky to learn some things was through friends and family.</p>
<hr>
<p><img src="img/grandparents.jpg" title="grandparents"></p>
<hr>
<p>These are my grandparents.</p>
<p>My grandfather used to program back when that meant plugging cables into different plugs.</p>
<p>He taught me some of the first things I learned about computers.</p>
<hr>
<p>binary</p>
<hr>
<p>One thing my grandpa taught me was binary.</p>
<p>Binary is fun and cool!</p>
<hr>
<p><code>&#160;&#160;0</code></p>
<hr>
<p>This is zero.</p>
<hr>
<p><code>&#160;&#160;1</code></p>
<hr>
<p>This is one.</p>
<p>Easy, right?</p>
<hr>
<p><code>&#160;10</code></p>
<hr>
<p>This is two.</p>
<hr>
<p><code>&#160;11</code></p>
<hr>
<p>This is three.</p>
<hr>
<p><code>100</code></p>
<hr>
<p>So what's this?</p>
<p>That's right, it's four!</p>
<p>So now you know binary.</p>
<p>Everything inside the computer is binary.</p>
<p>To get the computer to say &#8220;Hello&#8221;, it takes quite a lot of binary!</p>
<hr>
<p>school</p>
<hr>
<p>Another good way to learn things is at school.</p>
<hr>
<p><img src="img/old_apple.png" title="old Apple ]["></p>
<hr>
<p>At my old school, we had some computers that looked like this.</p>
<hr>
<p>typing</p>
<hr>
<p>Probably the most frequently useful thing I learned on those old computers was typing.</p>
<p>Typing is so important!</p>
<p>And I don't mean typing on a phone or a tablet. Touch screens are for babies.</p>
<p>You need to be able to touch type on a physical keyboard.</p>
<hr>
<p>internet</p>
<hr>
<p>Another source for learning materials is the internet.</p>
<hr>
<p>typing.com</p>
<hr>
<p>For example, you can learn and practice typing for free at <a href="https://www.typing.com/">typing.com</a>.</p>
<p>If you can't type 80 words per minute, go to <a href="https://www.typing.com/">typing.com</a> and keep practicing until you can!</p>
<hr>
<p><img height="1000%" src="img/cat_typing_animated.gif" title="cat typing"></p>
<hr>
<p>If you're lucky, a very large part of your future will involve typing.</p>
<hr>
<p>reading</p>
<hr>
<p>Reading is yet another really great way to learn things.</p>
<hr>
<p><img height="1000%" src="img/basic.jpg" title="basic manual"></p>
<hr>
<p>When I was young, I read a book like this which let me start to program on those old computers at my school.</p>
<p>This book is a bit out of date now, but there are lots of great books that you should read!</p>
<hr>
<p><img height="1000%" src="img/lauren_ipsum.png" title="Lauren Ipsum"></p>
<hr>
<p>This <a href="http://www.laurenipsum.org/">Lauren Ipsum</a> book is a really fun story that introduces computer science ideas in the context of a cool adventure story. Read it!</p>
<hr>
<p><img height="1000%" src="img/think_python.jpg" title="Think Python"></p>
<hr>
<p>This <a href="http://www.greenteapress.com/thinkpython/">Think Python</a> book is a more technical introduction to computer science and the Python programming language.</p>
<p>It's also super cool, and you can read the whole thing for free online! Just <a href="https://www.google.com/#q=Think%20Python">google 'Think Python'</a>.</p>
<hr>
<p><img height="1000%" src="img/cat_reading.jpg" title="reading cat"></p>
<hr>
<p>Cool cats read.</p>
<hr>
<p>build things</p>
<hr>
<p>You should also be learning things by building things.</p>
<hr>
<p><img height="1000%" src="img/ti_82.png" title="TI-82 graphing calculator"></p>
<hr>
<p>When I was school we had these huge calculators with tons of buttons.</p>
<p>They're kind of clunky, but the great thing was that you could write programs directly on them, any time.</p>
<p>We made so many cool things!</p>
<hr>
<p><span id="js">JavaScript</span></p>
<hr>
<p>Nowadays, computers with browsers are everywhere, which means YOU can program everywhere, with JavaScript inside the browser!</p>
<p>On my computer, with the Chrome browser, I can open up a JavaScript console with <code>option-command-j</code>.</p>
<p>By typing <code>document.getElementById('js').innerHTML = '&amp;hearts;'</code> here, I can change what my presentation says right here!</p>
<p>In the same way, JavaScript lets you play with programming and the web, any time!</p>
<hr>
<p>take things apart</p>
<hr>
<p>Another great way to learn about things is to take them apart.</p>
<hr>
<p><img height="1000%" src="img/cat_screwdriver.jpg" title="cat building computer"></p>
<hr>
<p>It's not always as easy to take computers apart these days, but it's still a fun thing to do if you can.</p>
<p>Taking computers apart, and building new ones yourself too, are great ways to understand how computers work.</p>
<hr>
<p>try things</p>
<hr>
<p>Really a lot of learning is just about trying things.</p>
<hr>
<p>concessionist, sandwich artist, computer salesperson, box cutter, clerk, assistant system administrator, experimentalist, math teacher, English teacher, analyst, senior data services specialist, data science expert in residence, consultant, data scientist, data science teacher, senior data scientist, senior data scientist and software engineer</p>
<hr>
<p>For example, I've tried a lot of jobs.</p>
<p>These are most of the job titles I've had since I was 15.</p>
<p>I've tried a lot of things, and I'm happy to say that my current job is the best ever. I do fun things with fun people, and I work from home with a hoodie on.</p>
<hr>
<p><img src="img/cat_reclining.png" title="cat reclining with keyboard"></p>
<hr>
<p>So this is what I look like at work.</p>
<hr>
<p><img height="1000%" src="img/cat_at_mini_desk.jpg" title="cat at mini desk"></p>
<hr>
<p>Sometimes I look like this.</p>
<hr>
<p><img height="1000%" src="img/cat_night.jpg" title="cat hacking at night"></p>
<hr>
<p>Sometimes I look like this.</p>
<hr>
<p><img height="1000%" src="img/cat_raging.jpg" title="enthusiastic cat"></p>
<hr>
<p>Sometimes I look like this.</p>
<hr>
<p><img height="1000%" src="img/cat_watching.jpg" title="cat watching screen"></p>
<hr>
<p>Sometimes I look like this.</p>
<hr>
<p><img src="img/cat_pouncing.jpg" title="cat pouncing at keyboard"></p>
<hr>
<p>And sometimes I look like this.</p>
<hr>
<p>What do I do?</p>
<hr>
<p>What do I actually do?</p>
<p>Good question!</p>
<hr>
<p><img src="img/xkcd_programming.png" title="xkcd programming"></p>
<hr>
<p>A big part of what I do is programming. I'm programming one way or another every day. Designing and building programs explains the "software engineer" part of my job title.</p>
<p>(image from <a href="https://xkcd.com/722/">xkcd 722</a>)</p>
<hr>
<p><img height="1000%" src="img/cat_science.jpg" title="science cat"></p>
<hr>
<p>My job title also includes data scientist, which mostly means doing experiments with data to find the best solutions to the problems we're dealing with.</p>
<hr>
<p><code>machine learning</code></p>
<hr>
<p>Data science includes working with what's called "machine learning".</p>
<p>Computers are stupid.</p>
<p>They're <em>so</em> stupid, that we have to tell them how to learn things, and then we have to try to get them to learn something by looking at some data.</p>
<hr>
<p><img src="img/wheres_waldo.jpg" title="Where's Waldo?"></p>
<hr>
<p>The main problem I'm working on right now is a lot like "Where's Waldo".</p>
<p>Can we get a computer to tell us where in the picture Waldo is?</p>
<p>Could the computer identify all the interesting things in the picture?</p>
<hr>
<p><a href="/20150907-interactive_perceptron_training_toy/">demo</a></p>
<hr>
<p>I don't have a good demo for the full problem I'm currently working on, but I do have my <a href="/20150907-interactive_perceptron_training_toy/">Interactive Perceptron Training Toy</a>, which is different from the "Where's Waldo" example, and simpler, and shows a lot of the moving parts.</p>
<p>(Proceed to demo with a few points and training on the perceptron toy.)</p>
<hr>
<p>here we go!</p>
<hr>
<p>(This slide flashes in presentation mode...)</p>
<hr>
<p>Thanks!</p>
<hr>
<p>Thank you!</p>
<hr>
<p></p><center>
planspace.org
<p>@planarrowspace
</p></center>
<hr>
<p>This is just me again.</p>    
    ]]></description>
<link>http://planspace.org/20151206-how_to_eat_computers/</link>
<guid>http://planspace.org/20151206-how_to_eat_computers/</guid>
<pubDate>Sun, 06 Dec 2015 12:00:00 -0500</pubDate>
</item>
<item>
<title>See sklearn trees with D3</title>
<description><![CDATA[

<p>The <a href="http://scikit-learn.org/stable/modules/tree.html">decision trees</a> from <a href="http://scikit-learn.org/">scikit-learn</a> are very easy to train and predict with, but it's not easy to see the rules they learn. The code below makes it easier to see inside <code>sklearn</code> classification trees, enabling visualizations that look like this:</p>
<p><a href="http://bl.ocks.org/ajschumacher/65eda1df2b0dd2cf616f"><img alt="partial tree view" src="partial_tree_view.png"></a></p>
<p>This shows, for example, that all the <a href="https://en.wikipedia.org/wiki/Iris_flower_data_set">irises</a> with <code>petal length (cm)</code> less than 2.45 were <code>setosa</code>.</p>
<p>The ability to interpret the rules of a decision tree is often considered a strength of the algorithm, and in <a href="https://www.r-project.org/">R</a> you can usually <code>summary()</code> and <code>plot()</code> a tree fit to see the rules. In <a href="https://www.python.org/">Python</a> with <code>sklearn</code>, there is <a href="http://scikit-learn.org/stable/modules/generated/sklearn.tree.export_graphviz.html"><code>export_graphviz</code></a>, but it isn't terribly convenient. It shouldn't be so hard to see what's going on inside a tree.</p>
<p>The following <a href="http://www.json.org/">JSON</a> format is simple and works with common <a href="http://d3js.org/">D3</a> tree graphing code, so let's target this format:</p>
<pre><code class="language-json">{name: "container thing",
 children: [{name: "leaf thing one"},
            {name: "leaf thing two"}]}</code></pre>

<p>Each <code>name</code> will describe a true/false decision rule for an inner node or the distribution of training example labels for a leaf node. The first of a pair of <code>children</code> is where the rule is true, and the second is where the rule is false. (These are binary trees.)</p>
<p>The way <code>sklearn</code> trees store their rules internally is described <a href="https://github.com/scikit-learn/scikit-learn/blob/0.16.1/sklearn/tree/_tree.pyx#L2956-L3008">in <code>_tree.pyc</code></a>. The <code>rules</code> function here examines a fit <code>sklearn</code> decision tree to generate a Python dictionary (with structure like the above) representing the decision tree's rules:</p>
<pre><code class="language-python">def rules(clf, features, labels, node_index=0):
    """Structure of rules in a fit decision tree classifier

    Parameters
    ----------
    clf : DecisionTreeClassifier
        A tree that has already been fit.

    features, labels : lists of str
        The names of the features and labels, respectively.

    """
    node = {}
    if clf.tree_.children_left[node_index] == -1:  # indicates leaf
        count_labels = zip(clf.tree_.value[node_index, 0], labels)
        node['name'] = ', '.join(('{} of {}'.format(int(count), label)
                                  for count, label in count_labels))
    else:
        feature = features[clf.tree_.feature[node_index]]
        threshold = clf.tree_.threshold[node_index]
        node['name'] = '{} &gt; {}'.format(feature, threshold)
        left_index = clf.tree_.children_left[node_index]
        right_index = clf.tree_.children_right[node_index]
        node['children'] = [rules(clf, features, labels, right_index),
                            rules(clf, features, labels, left_index)]
    return node</code></pre>

<p>How is this used? Let's get a quick example decision tree and take a look:</p>
<pre><code class="language-python">from sklearn.datasets import load_iris
from sklearn.tree import DecisionTreeClassifier

data = load_iris()

clf = DecisionTreeClassifier(max_depth=3)
clf.fit(data.data, data.target)

rules(clf, data.feature_names, data.target_names)</code></pre>

<p>The <code>rules</code> function returns the following Python dictionary, formatted for readability here:</p>
<pre><code class="language-python">{'name': 'petal length (cm) &gt; 2.45000004768',
 'children': [
     {'name': 'petal width (cm) &gt; 1.75',
      'children': [
         {'name': 'petal length (cm) &gt; 4.85000038147',
          'children': [
              {'name': '0 of setosa, 0 of versicolor, 43 of virginica'},
              {'name': '0 of setosa, 1 of versicolor, 2 of virginica'}]},
         {'name': 'petal length (cm) &gt; 4.94999980927',
          'children': [
              {'name': '0 of setosa, 2 of versicolor, 4 of virginica'},
              {'name': '0 of setosa, 47 of versicolor, 1 of virginica'}]}]},
     {'name': '50 of setosa, 0 of versicolor, 0 of virginica'}]}</code></pre>

<p>This is pretty readable, but now we can also write the result out to a file and visualize it with D3:</p>
<pre><code class="language-python">import json

r = rules(clf, data.feature_names, data.target_names)
with open('rules.json', 'w') as f:
    f.write(json.dumps(r))</code></pre>

<p>Check out the <a href="http://bl.ocks.org/ajschumacher/65eda1df2b0dd2cf616f">interactive view</a>! Once again, a partially expanded view looks like this:</p>
<p><a href="http://bl.ocks.org/ajschumacher/65eda1df2b0dd2cf616f"><img alt="partial tree view" src="partial_tree_view.png"></a></p>    
    ]]></description>
<link>http://planspace.org/20151129-see_sklearn_trees_with_d3/</link>
<guid>http://planspace.org/20151129-see_sklearn_trees_with_d3/</guid>
<pubDate>Sun, 29 Nov 2015 12:00:00 -0500</pubDate>
</item>
<item>
<title>A New Culture of Learning</title>
<description><![CDATA[

<p>I read this <a href="http://www.newcultureoflearning.com/">book</a> and it introduced me to the word aporia, which I appreciate. Here is a definition that comes up on Google:</p>
<blockquote>
<p>aporia: an irresolvable internal contradiction or logical disjunction in a text, argument, or theory</p>
</blockquote>
<p>Here is a summary of this book, in one quote from its page 107:</p>
<blockquote>
<p>In our view, MMOs are almost perfect illustrations of a new learning environment.</p>
</blockquote>
<p>I have minor gripes and major gripes about this book. A minor gripe is they say "petri dish" a lot, and I think they shouldn't. A major gripe is that the whole book is essentially a false dichotomy between a straw man version of schooling and impoverished, unworkable gesticulations labeled "new learning." It isn't that there aren't any good ideas here, but they are old ideas misunderstood and presented as if new.</p>
<p>Skip this book.</p>
<hr>
<p>A New Culture of Learning: Cultivating the Imagination for a World of Constant Change</p>
<p>by Douglas Thomas and John Seely Brown</p>
<p><a href="http://www.amazon.com/New-Culture-Learning-Cultivating-Imagination/dp/1456458884"><img alt="cover" src="cover.jpg"></a></p>    
    ]]></description>
<link>http://planspace.org/20151122-a_new_culture_of_learning/</link>
<guid>http://planspace.org/20151122-a_new_culture_of_learning/</guid>
<pubDate>Sun, 22 Nov 2015 12:00:00 -0500</pubDate>
</item>
<item>
<title>Lauren Ipsum</title>
<description><![CDATA[

<p>I finally read a copy of <a href="http://www.laurenipsum.org/">Lauren Ipsum</a> that I had lying around, wanting to read it before giving it away when I go talk at a school as part of their upcoming <a href="https://hourofcode.com/">Hour of Code</a> festivities.</p>
<p>I liked it so much, I gave my initial copy to a friend who teaches computer science, and I'm getting three more copies to give away at that school and as gifts to others.</p>
<p>I agree with the Phantom Tollbooth <a href="http://boingboing.net/2014/12/29/lauren-ipsum-the-phantom-toll.html">comparison</a>. The writing is dense at multiple scales with fun computer science concepts, references, and wordplay, from the value of elegant design, to forests of <a href="https://en.wikipedia.org/wiki/Red%E2%80%93black_tree">red-black trees</a>, to optimizing away literal <a href="https://en.wikipedia.org/wiki/Tail_call">tails</a>. I laughed out loud.</p>
<p><a href="http://www.amazon.com/Lauren-Ipsum-Computer-Science-Improbable/dp/1593275749/"><img alt="cover" src="cover.png"></a></p>    
    ]]></description>
<link>http://planspace.org/20151122-lauren_ipsum/</link>
<guid>http://planspace.org/20151122-lauren_ipsum/</guid>
<pubDate>Sun, 22 Nov 2015 12:00:00 -0500</pubDate>
</item>
<item>
<title>Debugging Teams</title>
<description><![CDATA[

<p><a href="http://shop.oreilly.com/product/0636920042372.do"><img alt="cover of debugging teams" src="debugging_teams.jpg"></a></p>
<p>I read this book after listening to <a href="http://radar.oreilly.com/2015/10/the-first-rule-of-management-resist-the-urge-to-manage.html">a podcast</a>. It's been described as &#8220;<a href="https://en.wikipedia.org/wiki/How_to_Win_Friends_and_Influence_People">How to Win Friends and Influence People</a> for programmers&#8221;.</p>
<p>Debugging Teams is supposed to be a new, less software-developer-specific version of <a href="http://shop.oreilly.com/product/0636920018025.do">Team Geek</a>. I haven't read Team Geek, but Debugging Teams still had pretty much that was focused on software-related things. I thought this was a good thing. Sure it could generalize.</p>
<p>The main thesis of the book is their &#8220;HRT&#8221;: humility, respect, and trust. These are all good things to have. As they say:</p>
<ul>
<li><em>Humility</em> You are not the center of the universe. You&#8217;re neither omniscient nor infallible. You&#8217;re open to self-improvement.</li>
<li><em>Respect</em> You genuinely care about others you work with. You treat them as human beings, and appreciate their abilities and accomplishments.</li>
<li><em>Trust</em> You believe others are competent and will do the right thing, and you&#8217;re OK with letting them drive when appropriate.</li>
</ul>
<p>Here are some more quotes I pulled out as I was reading; some of them are themselves quotes.</p>
<blockquote>
<p>&#8220;People are basically a giant pile of intermittent bugs.&#8221;</p>
<p>Shouldn&#8217;t people be allowed to work however they want? Actually, no. In this case we assert that you&#8217;re doing it wrong, and it is a big deal. Here&#8217;s why. Hiding Is Considered Harmful</p>
<p>Bus factor (noun): the number of people that need to get hit by a bus before your project is completely doomed.</p>
<p>we work best in tight feedback loops.</p>
<p>Software development is a team sport.</p>
<p>you are not your code. Say that over and over.</p>
<p>&#8220;Failure is an option.&#8221;</p>
<p>Write up &#8220;postmortems,&#8221; as they&#8217;re often called in our business. Take extra care to make sure the postmortem document isn&#8217;t just a useless list of apologies or excuses &#8212; that&#8217;s not its purpose. A proper postmortem should always contain an explanation of what was learned and what is going to change as a result of the learning experience. Then make sure you put it in an easy-to-find place and really follow through on the proposed changes. Remember that properly documenting failures also makes it easier for other people (present and future) to know what happened and avoid repeating history. Don&#8217;t erase your tracks &#8212; light them up like a runway for those who follow you!</p>
<p>The problem is that once you reach a local maximum on your team, you stop learning.</p>
<p>The more you are open to influence, the more you are able to influence; the more vulnerable you are, the stronger you appear.</p>
<p>A &#8220;strong culture&#8221; is one that is open to change that improves it, yet is resistant to radical change that harms it.</p>
<p>A good general rule around communication is to include as few people as necessary in synchronous communication (like meetings and phone calls), and to go for a broader audience in asynchronous communication (like email, issue trackers, and document comments).</p>
<p>We like our meetings like we like our sewage treatment plants: few, far between, and downwind.</p>
<p>We&#8217;ve seen some cultures where meeting attendance is equated with status, so nobody wanted to be left out. Not to put too fine a point on it, but that is patently insane.</p>
<p>If you&#8217;re trying to design something new, try to include no more than five people in your meeting</p>
<p>flat out ignore invitations to a meeting that has no agenda.</p>
<p>many engineers rush right into coding before designing the software they intend to write, and this usually ends very badly.</p>
<p>When many people first hear about IRC these days, they scoff at its primitive text-based environment because even the most modern of IRC clients tend to be less whizzy than outdated versions of iChat or Google Talk. Don&#8217;t be fooled by the outdated look and feel of IRC &#8212; its killer features are that it was designed for multiperson chat and it&#8217;s asynchronous; most clients keep an unlimited scroll-back record so that you can read back to see conversations among others that you missed. Slack is basically the modern-day version of IRC, and despite its whizzy integration of graphics, avatars, and emoji, at its heart it&#8217;s still a text-based messaging system like IRC. It may be tempting to try out fancy videoconferencing packages, shared whiteboard systems, and more, but these systems often tend to be ineffective and can eliminate the asynchronous advantage of text-based group chat. If you&#8217;re going to use something other than Slack or IRC, find something that is actually designed for group chat and isn&#8217;t just an instant messaging system with group chat bolted on.</p>
<p>Comments should be focused on why the code is doing what it&#8217;s doing, not what the code is doing.</p>
<p>infer what various symbols are and what invariants are true about them.</p>
<p>attempting to add and remove names from a source file is a never-ending exercise in insanity.</p>
<p>the overwhelming majority of effort that goes into a culture turns out to be communication.</p>
<p>saying no to all of the distractions is what keeps you focused.</p>
<p>the best leaders work to serve their team using the principles of humility, respect, and trust.</p>
<p>A boat without a captain is nothing more than a floating waiting room</p>
<p>Managers wind up acting like parents, and consequently employees react like children.</p>
<p>Traditional managers worry about how to get things done, while leaders worry about what things get done&#8230;(and trust their team to figure out how to do it).</p>
<p>A TL is typically responsible for the technical direction for all (or part) of a product, while a TLM is responsible for the technical direction for all (or part) of a product in addition to the careers and happiness of the people on the team.</p>
<p>&#8220;Above all, resist the urge to manage.&#8221;</p>
<p>you should strive to hire people who are smarter than you and can replace you.</p>
<p>&#8220;Hope is not a strategy.&#8221;</p>
<p>&#8220;A people hire other A people; B people hire C people.&#8221;</p>
<p>As an engineer, you likely developed an excellent sense of skepticism and cynicism, but this can be a liability when you&#8217;re trying to lead a team.</p>
<p>As a leader, your job is to inspire, but inspiration is a 24/7 job.</p>
<p>In many cases, knowing the right person is more valuable than knowing the right answer.</p>
<p>We strongly advise against using the compliment sandwich,</p>
<p>It&#8217;s the behaviors you want to filter out, not particular individuals.</p>
<p>Document all history: not just code history, but also design decisions, important bug fixes, and prior mistakes.</p>
<p>Streamline the barrier to entry for newcomers.</p>
<p>Attention and focus are the scarcest resources you have.</p>
<p>A strong culture based on HRT is irreplaceable, while technical contributions are definitely replaceable.</p>
<p>genius is such a commodity these days that it&#8217;s not acceptable to be an eccentric anymore.</p>
<p>it&#8217;s not worth compromising your culture for the short-term gains</p>
<p>there are only a few crazy people out there; the Internet just makes it seems like they all live next door.&#8221;</p>
<p>Most people work in dysfunctional corporate bureaucracies and need to employ certain manipulative techniques to get things done effectively.</p>
<p>It boils down to this: is your manager serving you? Or are you serving your manager? It should always be the former.</p>
<p>&#8220;It&#8217;s impossible to simply stop a bad habit; you need to replace it with a good habit.&#8221;</p>
<p>categorize all work as either &#8220;offensive&#8221; or &#8220;defensive.&#8221;</p>
<p>Every company has a gray-market favor economy that lives outside the org chart,</p>
<p>Every company has a &#8220;shadow&#8221; org chart that is unwritten but through which power and influence flow.</p>
<p>A good Three Bullets and a Call to Action email contains (at most) three bullet points detailing the issue at hand, and one &#8212; and only one &#8212; call to action.</p>
<p>Most industries are a lot smaller than you think, and people talk more than you think,</p>
<p>Friends come and go&#8230;enemies accumulate.</p>
<p>product laziness.</p>
<p>It&#8217;s really obvious (and infuriating) when a programmer could have made something friendly and easy for the end user but didn&#8217;t bother.</p>
<p>Most programmers vastly underestimate the importance of application speed (or latency, which sounds more scientific).</p>
<p>&#8220;Speed is a feature.&#8221;</p>
<p>An elegant design makes easy things easy and hard things possible.</p>
<p>the user&#8217;s data needs to be accessible</p>
<p>learn great patience.</p>
<p>there is no such thing as a temporary lapse of integrity.</p>
<p>Trust is your most sacred resource.</p>
<p>Humans are unpredictable and tricky to deal with no matter what the context.</p>
</blockquote>
<p>And finally, <a href="http://www.cs.virginia.edu/~robins/YouAndYourResearch.html">&#8220;You and Your Research&#8221; by Richard Hamming</a> seems like good reading they recommended.</p>    
    ]]></description>
<link>http://planspace.org/20151118-debugging_teams/</link>
<guid>http://planspace.org/20151118-debugging_teams/</guid>
<pubDate>Wed, 18 Nov 2015 12:00:00 -0500</pubDate>
</item>
<item>
<title>Creative Data Science</title>
<description><![CDATA[

<p><em>A &#8220;Brown Bag Lunch&#8221; &#8220;Chalk Talk&#8221; for the <a href="http://www.worldbank.org/">World Bank Group</a> IFC (<a href="http://www.ifc.org/">International Finance Corporation</a>) RMES (<a href="http://red-sphere.com/clients/WBG/video/index.html">Results, Measurement and Evaluation Stream</a>) on Thursday November 12, 2015. (<a href="big.html">slides</a>)</em></p>
<p>This is the flier the World Bank folks made:</p>
<p><img alt="flier" src="flier.png"></p>
<p>Here are some questions the audience was asked to answer and discuss before things got rolling:</p>
<ul>
<li>What are you reading?</li>
<li>What is your favorite tool, process, or technique for your work?</li>
<li>What is your <em>least</em> favorite tool, process, or technique for your work?</li>
<li>What was the last new tool, process, or technique you learned (or are currently learning)?</li>
<li>What would you like to learn next?</li>
</ul>
<p>The text below starts out fairly complete, and then toward the end it's more demo and telegraphic notes to myself.</p>
<hr>
<p></p><center>
planspace.org
<p>@planarrowspace
</p></center>
<hr>
<p>Hi! I'm Aaron. This is my blog and <a href="https://twitter.com/planarrowspace">my twitter handle</a>. You can get from one to the other. <a href="big.html">This presentation</a> and a corresponding write-up (you're reading it) are on my blog (which you're on).</p>
<hr>
<p><img height="1000%" src="tool_bench.jpg" title="tool bench"></p>
<hr>
<p>I was invited to give a talk about &#8220;the data scientist's toolbox&#8221;.</p>
<p>A lot of people, when they hear &#8220;the data scientist's toolbox&#8221;, think of programming languages, or particular suites of implementations like Hadoop or Spark.</p>
<hr>
<p><img width="1000%" src="alexnet.png" title="AlexNet"></p>
<hr>
<p>So here's a tool!</p>
<p>It's the AlexNet deep convolutional neural network, which was state of the art for identifying things in images a couple years ago. We could use a Caffe Model Zoo implementation, which would still have the 11-by-11 convolutions on the first layer, but likely wouldn't split the computation across two GPUs that way, yadda yadda yadda, this kind of thing is relevant to some of the work my current company is doing, yadda yadda yadda.</p>
<p>This might be interesting for some people, but for a lot of people I suspect it would not be directly useful.</p>
<hr>
<p>&#8220;Be regular and orderly in your life so that you may be violent and original in your work.&#8221;</p>
<hr>
<p>I came across this <a href="https://en.wikipedia.org/wiki/Gustave_Flaubert">Flaubert</a> quote <a href="http://planspace.org/2014/01/19/daily-rituals-is-sort-of-inspiring/">somewhere</a>, and I like it quite a lot.</p>
<p>The tools I want to focus on help me to be regular and orderly in my everyday work.</p>
<p>Being regular and orderly in everyday work means that everyday work becomes easier, leaving capacity for more sophisticated work.</p>
<p>From the other side, even if your work is very sophisticated, you still have to attend to the everyday, and life will be better if it is well attended.</p>
<hr>
<p><img src="canvas.jpg" title="blank canvas" width="1000%"></p>
<hr>
<p>Another way to think about tools is to weigh what's more important to the painting, the painter or the brush?</p>
<p>Certainly you need both, and tools are more or less a requirement everywhere. But the mental tools, the skills and experience of the painter, these make the lion's share of the difference in the end results.</p>
<p>I haven't taught painting, but I've taught &#8220;data science tools&#8221; for a number of years, and my overwhelming impression has been that mental tools matter more than the particular software people happen to use.</p>
<p>The good news is that while you may not always be able to choose your tools, you can always choose (and improve) the self that you bring to them!</p>
<hr>
<p><img height="1000%" src="debugging_teams.jpg" title="Debugging Teams cover"></p>
<hr>
<p>The first question I asked earlier (&#8220;What are you reading?&#8221;) may have seemed not to be about tools, but it is. Reading builds you new tools.</p>
<p>Here's what I'm currently reading: a book called &#8220;Debugging Teams&#8221;. Good book!</p>
<p>You have a great team here at the World Bank, and I want to point out that you're doing a great thing today, taking your lunch to become even greater. That's exactly the kind of thing that strong teams do.</p>
<hr>
<p>create</p>
<hr>
<p>A central point of &#8220;Debugging Teams&#8221; is the importance of humility, respect, and trust.</p>
<p>In that spirit, let me describe a best-case scenario for our time together:</p>
<p>I will mostly tell you about other people's ideas. (And I may not always cite sources.)</p>
<p>Worse, I probably won't even have quite the right ideas for you.</p>
<p>I'm going to talk about some things that I think help create good work with data.</p>
<p>But I sure don't have your expertise, experience, and other knowledge about everything that you're working on.</p>
<p>This kind of event doesn't make sense if it's just me talking and then everybody goes back to working exactly the same as they always do.</p>
<p>You've come together in this safe collaborative space. The people who should get something out of it are you. What will you go on to do that you wouldn't have done if you weren't in this room today? This is a chance for you to think up something great! It could be the opposite of what I suggest, or totally unrelated. Today could be the day you have that great idea that saves the world!</p>
<p>Create!</p>
<hr>
<ul>
<li>immutability</li>
<li>separation of concerns</li>
<li>interoperability</li>
<li>message-passing</li>
</ul>
<hr>
<p>These are the key ideas that I want to explore today. It's okay if they don't make sense now.</p>
<hr>
<p>[demo]</p>
<hr>
<p>This bit is a kind of game.</p>
<p>I'm going to do a demonstration with Excel, which I understand some of you have seen before, and I want you to evaluate what I do.</p>
<p>It's as simple as "Aaron did X, and it was good (or bad) because Y."</p>
<p>After I finish, we'll discuss in pairs and try to get a list of twelve such evaluations.</p>
<hr>
<p><img src="important_stats1.png" title="screenshot"></p>
<hr>
<p>Here's what <code>important_stats.xlsx</code> looks like originally.</p>
<hr>
<p><img src="important_stats2.png" title="screenshot"></p>
<hr>
<p>Here's what <code>important_stats.xlsx</code> looks like after we're done with it.</p>
<hr>
<p>Discussion!</p>
<ul>
<li>good things?</li>
<li>bad things?</li>
<li>WWYD?</li>
</ul>
<hr>
<p>That's "What Would You Do".</p>
<p>Let's get twelve things!</p>
<hr>
<p>immutability</p>
<hr>
<p>What is this?</p>
<hr>
<p><img height="1000%" src="rick1.png" title="healthy Rick"></p>
<hr>
<p>Here is normal Rick.</p>
<p>Until he does some weird chemical things.</p>
<hr>
<p><img width="1000%" src="rick2.png" title="Cronenberg Rick"></p>
<hr>
<p>Rick is mutated! Old Rick is gone! He's all Cronenberg'ed up!</p>
<hr>
<p>destroy &#8800; create</p>
<hr>
<p>Old Rick has been <em>destroyed</em>, which is the opposite of <em>creative</em>. We want to make things, not destroy them!</p>
<p>When I saved over the original version of the file, I destroyed it! It is gone forever!</p>
<hr>
<p>reproducible research</p>
<hr>
<p>What is research that isn't reproducible? Wrong!</p>
<hr>
<p><img width="1000%" src="tree.png" title="commit graph"></p>
<hr>
<p>Make new versions! It's a DAG now!</p>
<hr>
<p>[demo]</p>
<hr>
<p>Using <code>important_stats_20151111.xlsx</code>.</p>
<hr>
<p><img src="git.png" width="1000%" title="git"></p>
<hr>
<p><a href="http://git-scm.com/">git</a> is the real answer.</p>
<hr>
<p>separation of concerns</p>
<hr>
<p>This is concept two.</p>
<hr>
<ul>
<li>entry/editing</li>
<li>storage</li>
<li>calculation</li>
<li>presentation</li>
</ul>
<hr>
<p>These are all things that we were doing in Excel.</p>
<hr>
<p><img src="swiss_army_knife.png" title="Swiss Army knife" height="1000%"></p>
<hr>
<p>Some people use "Swiss Army knife" as a kind of compliment, but I don't think it should be. You've got a knife and a screwdriver, but you almost certainly have your very <em>worst</em> knife and your very <em>worst</em> screwdriver.</p>
<p>At least for tools, usually a jack of all trades is a master of none.</p>
<p>It can be convenient to have a Swiss Army knife around, but it isn't the tool of choice when a professional goes to work.</p>
<hr>
<p>[demo]</p>
<hr>
<p>Use Excel to change values, save as CSV; now we have data entry and storage separated.</p>
<hr>
<p>interoperability</p>
<hr>
<p>Choose tools that work together! Multiply possibilities!</p>
<hr>
<p>&#8220;The idea is not to replace one tool with another but rather build a better ecosystem of complementary tools.&#8221;</p>
<hr>
<p>This is a quote from a <a href="https://www.youtube.com/watch?v=GdoDLuPe-Wg">presentation</a> given by <a href="https://twitter.com/jeffrey_heer">Jeffrey Heer</a>.</p>
<hr>
<p><img src="person.png" title="person" height="1000%"></p>
<hr>
<p>Interview person who only works with other club members.</p>
<hr>
<p>open standards</p>
<hr>
<p>Some standardization is necessary, but it should be open and Free!</p>
<hr>
<p><code>text text text text text text</code></p>
<hr>
<p>Text is great!</p>
<hr>
<p><img src="git.png" width="1000%" title="git"></p>
<hr>
<p><code>git</code> example: lots of vendors, etc. Not locked in!</p>
<hr>
<p>languages: tools for making tools</p>
<hr>
<p>R and Python!</p>
<hr>
<p>[demo]</p>
<hr>
<p>Write it in R! In RStudio! Yeah! (See <code>important_mean.R</code>.)</p>
<p>Using <code>R</code> just for calculation!</p>
<p>Add <code>cowsay</code> for presentation!</p>
<pre><code class="language-bash">Rscript important_mean.R | cowsay</code></pre>

<p>Repeat with Python! In Emacs! Yeah! (See <code>important_mean.py</code>.)</p>
<p>Using <code>python</code> just for calculation!</p>
<p>Add <code>cowsay</code> for presentation!</p>
<pre><code class="language-bash">python important_mean.py | cowsay</code></pre>

<pre><code> __________________
&lt; 0.00331428571429 &gt;
 ------------------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||</code></pre>

<hr>
<p>message-passing</p>
<hr>
<p>Saw some with the connections between R, Python, and <code>cowsay</code>.</p>
<p>How does anyone know what I'm working on? The changes I've made? etc.</p>
<p>Publish widely! Making available is different than notifying!</p>
<p>Give your paper to someone else!</p>
<hr>
<ul>
<li>immutability</li>
<li>separation of concerns</li>
<li>interoperability</li>
<li>message-passing</li>
</ul>
<hr>
<p>Wrapping up!</p>
<hr>
<p>Thanks!</p>
<hr>
<p>Thank you!</p>
<hr>
<p></p><center>
planspace.org
<p>@planarrowspace
</p></center>
<hr>
<p>This is just me again.</p>    
    ]]></description>
<link>http://planspace.org/20151112-creative_data_science/</link>
<guid>http://planspace.org/20151112-creative_data_science/</guid>
<pubDate>Thu, 12 Nov 2015 12:00:00 -0500</pubDate>
</item>
<item>
<title>Interactive Perceptron Training Toy</title>
<description><![CDATA[

<p>A little while ago I <a href="../20150610-a_javascript_perceptron/">contributed</a> a simple <a href="https://en.wikipedia.org/wiki/Perceptron">perceptron</a> model for the <a href="http://simplestatistics.org/">Simple Statistics</a> JavaScript library. This makes possible things like this interactive perceptron model training environment, in which you can get a &#8220;hands-on&#8221; feel for how the model works in two dimensions.</p>
<p>The space below starts all red, which means the model starts predicting any given point is &#8220;negative.&#8221; As you update things, the color will update to show where the model would predict positive (blue) and negative (red).</p>
<p>The space below is clickable! One normal (left) click will add a blue (positive; label &#8220;1&#8221;) point. Clicking on a blue point will turn it red (negative; label &#8220;0&#8221;). Clicking on a red point will remove it. So you can cycle between no point, blue point, red point, no point.</p>
<p>To train the model, choose a point and use your other click (control click or right click). The perceptron model updates when it makes an incorrect prediction. You'll see details about this process below the box, as it happens!</p>
<p></p><center><div id="space"></div></center>
<h3>Diagnostics appear with model training:</h3>
<div id="status"></div>

<p>You can follow the model fitting step by step! (To reset everything, just reload the page.)</p>
<p>Since we're in two dimensions, each data point has an <em>x</em> and <em>y</em> coordinate, written <em>[x, y]</em>. The perceptron model has two weights that correspond to the <em>x</em> and <em>y</em> directions (let's just call them <em>a</em> and <em>b</em>), and a bias term which we can call <em>c</em>.  The model predicts <em>positive</em> (blue) if <em>a<em>x + b</em>y + c</em> is greater than zero, and <em>negative</em> (red) otherwise. (You can think of the bias term as a weight that is always multiplied by one.)</p>
<p>One thing that became particularly clear as I put this together is how really essential centering and scaling data is. With points within three of the origin in either direction, the model can usually do well in a reasonable number of training steps, especially if the points are spread around the origin. But try putting two points of opposing color on a diagonal near the same corner of the box. It takes <em>forever</em> to fit! The perceptron can have a hard time moving away from intercepting the origin.</p>
<p>You can also see quite plainly that the (single layer) perceptron classifies by linear separation, so it can't handle the <a href="http://www.ece.utep.edu/research/webfuzzy/docs/kk-thesis/kk-thesis-html/node19.html">XOR problem</a>.</p>
<p>Fun!</p>
<p><link rel="stylesheet" href="style.css">
<script src="script.js"></script></p>    
    ]]></description>
<link>http://planspace.org/20150907-interactive_perceptron_training_toy/</link>
<guid>http://planspace.org/20150907-interactive_perceptron_training_toy/</guid>
<pubDate>Mon, 07 Sep 2015 12:00:00 -0500</pubDate>
</item>
<item>
<title>Don't Shoot the Dog!</title>
<description><![CDATA[

<p>On the <a href="https://www.youtube.com/watch?v=hY14Er6JX2s">recommendation</a> of <a href="http://blog.sashalaundy.com/">Sasha Laundy</a>, I read <a href="http://www.amazon.com/Dont-Shoot-Dog-Teaching-Training/dp/0553380397">Don't Shoot the Dog!</a> by Karen Pryor.</p>
<ol>
<li>The advice on memorizing by starting with the end of a passage, so that rehearsal always starts with the difficult and then progresses to familiar material, strikes me as good advice that I may have heard before but forgotten.</li>
<li>I would like to play the Training Game, which is described in the selection below.</li>
</ol>
<p>It's a fun book, and it makes me want to train a cat or dog to do fun things.</p>
<blockquote>
<p>Don't Shoot the Dog! pages 52 to 54, The Training Game</p>
<p>Even if you know and understand the principles of shaping, you can't apply them unless you practice them. Shaping is not a verbal process, it is a nonverbal skill&#8212;a flow of interactive behavior through time, like dancing, or making love, or surfing. As such, it can't really be learned by reading or thinking or talking about it. You have to do it.</p>
<p>One easy and fascinating way to develop shaping skills is by playing the Training Game. I use the Training Game in teaching the techniques of training. Many trainers play it for sport; it makes an interesting party game.</p>
<p>You need two people at least: the subject and the trainer. Six is ideal because then every person can experience being both subject and trainer at least once before the group gets tired; but larger groups&#8212;a classroom or lecture audience, for example&#8212;are feasible, because observing is almost as much fun as participating.</p>
<p>You send the subject out of the room. The rest of the people select a trainer and choose  a behavior to be shaped: for example, to write one's name on the blackboard, jump up and down, or stand on a chair. The subject is invited back in and told to move about the room and be active; the trainer reinforces, by blowing on a whistle, movements in the general direction of the desired behavior. I like to make a rule at least for the first few reinforcements that the &#8220;animal&#8221; has to go back to the doorway after each reinforcer and start anew; it seems to help prevent a tendency of some subjects to just stand still wherever reinforcement was last received. And no talking. Laughter, groans, and other signs of emotion are permitted, but instructions and discussion are out until after the behavior is achieved.</p>
<p>Ordinarily the Training Game goes quite fast. Here's an example: Six of us are playing the game in a friend's living room. Ruth volunteers to be the animal, and it's Anne's turn to be the trainer. Ruth goes our of the room. We all decide that the behavior should be to turn on the lamp on the end table beside the couch.</p>
<p>Ruth is called back in and begins wandering around the room. When she heads in the direction of the lamp, Anne blows the whistle. Ruth goes back to &#8220;Start&#8221; (the doorway), then moves purposefully to the spot where she was reinforced and stops. No whistle. She waves her hands about. No whistle. She moves off the spot, tentatively, away from the lamp as it happens. Still hearing no whistle, Ruth begins walking around again. When once again she walks toward the lamp, Anne blows the whistle.</p>
<p>Ruth returns to the door and then returns to the new spot where she just heard the whistle, but this time she keeps walking forward. Bingo: whistle. Without going back to the door, she walks forward some more and hears the whistle just as she is coming up against the end table. She stops. She bumps the end table. No whistle. She waves her hands around; no whistle. One hand brushes the lampshade, and Anne whistles. Ruth begins touching the lampshade all over&#8212;moving it, turning it, rocking it: no whistle. Ruth reaches up underneath the lampshade. Whistle. Ruth reaches underneath the shade again, and, the gesture being very familiar and having a purpose, she executes the purpose and turns on the lamp. Anne whistles and the rest of us applaud.</p>
<p>Things don't always go that smoothly, even with simple, familiar behaviors. Anne, as it turned out, made a good training decision when she withheld reinforcement as Ruth moved from the spot where she'd first been reinforced, but in the wrong direction. If, however, Ruth had then moved back to the spot and just stood there, Anne might have been in trouble.</p>
</blockquote>    
    ]]></description>
<link>http://planspace.org/20150705-dont_shoot_the_dog/</link>
<guid>http://planspace.org/20150705-dont_shoot_the_dog/</guid>
<pubDate>Sun, 05 Jul 2015 12:00:00 -0500</pubDate>
</item>
<item>
<title>Code Reading Question</title>
<description><![CDATA[

<p>Here's an idea for a type of question to help assess a person's skill in programming. Give the person some code to read:</p>
<pre><code class="language-python">def norf(bar, foo):
    for baz in bar:
        if baz in foo or norf(baz, foo+[baz]):
            return True
    return False</code></pre>

<p>This is four lines of Python.</p>
<p>Some of the questions you could ask:</p>
<ul>
<li>What does <code>norf</code> do?</li>
<li>What are the types of the arguments <code>bar</code> and <code>foo</code>?</li>
<li>What are better names for <code>norf</code>, <code>bar</code>, <code>foo</code>, and <code>baz</code>?</li>
<li>What data structure are we working with?</li>
<li>What are alternatives for the design of this data structure?</li>
<li>What are limitations of this function?</li>
</ul>
<p>I suspect that this could be interesting. I haven't seen anyone use interview questions of this type. I wonder how well this one would work.</p>    
    ]]></description>
<link>http://planspace.org/20150616-code_reading_question/</link>
<guid>http://planspace.org/20150616-code_reading_question/</guid>
<pubDate>Tue, 16 Jun 2015 12:00:00 -0500</pubDate>
</item>
<item>
<title>The NVIDIA Jetson TK1 with Caffe on MNIST</title>
<description><![CDATA[

<p>Let's do <a href="https://en.wikipedia.org/wiki/Deep_learning">deep learning</a> for image classification on a <a href="https://en.wikipedia.org/wiki/Graphics_processing_unit">GPU</a>!</p>
<p>Go!</p>
<p><img alt="Jetson TK1" src="jetson.png"></p>
<p><em><a href="https://www.flickr.com/photos/120586634@N05/14488628209/in/album-72157645736592714/">Image from Gareth Halfacree</a>.</em></p>
<p>The <a href="https://developer.nvidia.com/jetson-tk1">Jetson</a> is a pretty remarkable little machine. And NVIDIA prices it at just $192: one dollar per core on the GPU. But there is a little work involved in getting a Jetson set up. Steps described here:</p>
<ol>
<li>Flash the Jetson to most recent OS (L4T 21.3)</li>
<li>Install the <a href="http://caffe.berkeleyvision.org/">Caffe</a> deep learning framework</li>
<li>Train a classic <a href="https://en.wikipedia.org/wiki/Convolutional_neural_network">convolutional</a> net on <a href="http://yann.lecun.com/exdb/mnist/">MNIST</a></li>
</ol>
<p>Without extra hardware, the easiest way to start working with the Jetson is to plug it in directly to your router with an ethernet cable. Then you can <code>ssh</code> in to <code>tegra-ubuntu</code> on the local network, using the default username and password (both <code>ubuntu</code>):</p>
<pre><code class="language-bash">ssh ubuntu@tegra-ubuntu.local</code></pre>

<h3>1. Flash the Jetson to the most recent OS (L4T 21.3)</h3>
<p>The GPU on the Jetson is a Tegra K1. The Jetson I received came preinstalled with an <a href="https://developer.nvidia.com/linux-tegra-rel-19">early version</a> of the "<a href="https://developer.nvidia.com/linux-tegra">Linux for Tegra</a>" (L4T) <a href="http://www.ubuntu.com/">Ubuntu</a>-based operating system. Step one is updating to the most recent version (currently <a href="https://developer.nvidia.com/linux-tegra-r213">21.3</a>).</p>
<p>I flashed with the <a href="https://developer.nvidia.com/jetson-tk1-development-pack">Jetson TK1 Development Pack</a>. Two things about the &#8220;JetPack&#8221;:</p>
<ul>
<li>You can only run the JetPack on 64-bit Ubuntu 12.04 and 14.04. I used 14.04.</li>
<li>The JetPack is about 12 gigabytes in size, so make sure you have enough space on your machine or any virtual machine you plan to use.</li>
</ul>
<p>I'm running a Mac over here, so I used <a href="https://www.virtualbox.org/">VirtualBox</a> (4.3.28, plus the extension pack) to install a virtual <a href="http://www.ubuntu.com/download/desktop">Ubuntu Desktop</a> 14.04.2 LTS from ISO. I hadn't created a VirtualBox image this way before; it's pretty cool! You can tell VirtualBox that the ISO is in a virtual DVD drive, and boot from it. An NVIDIA Developer Zone <a href="https://devtalk.nvidia.com/default/topic/718220/tegra-tools/jetson-tegra-k1-development-kit/">post</a> was very helpful in figuring all this out. Takes me back to the days when you had to burn an ISO to a physical CD...</p>
<p>It took me a couple tries to get everything right; to get it all done in one pass you would want to connect the Jetson via USB and start it in recovery mode now, then adjust the VirtualBox settings so that there's a &#8220;USB Device Filter&#8221; for the &#8220;NVIDIA Corp. APX [0101]&#8221; device accessible, before even installing the VM.</p>
<p>There was one headache in getting the Ubuntu desktop to display at reasonable resolutions. The display resolution started at 640 by 480, with no apparent way to change it. Thanks to <a href="http://askubuntu.com/users/394518/johnathan-davis">Jonathan Davis</a> for <a href="http://askubuntu.com/questions/588943/experiencing-small-resolution-issue-in-ubuntu-14-04-2-with-virtualbox-getting-s">suggesting</a> a solution that worked for me:</p>
<pre><code class="language-bash">sudo apt-get remove libcheese-gtk23
sudo apt-get install xserver-xorg-core
sudo apt-get install -f virtualbox-guest-x11</code></pre>

<p>Reboot and get full-screen majesty!</p>
<p>In Ubuntu then I was able to install the JetPack. This whole process takes at least enough time to eat some Thai food.</p>
<p>After flashing, I cleaned out the old record from <code>~/.ssh/known_hosts</code> and was able to log in to a shiny new &#8220;Linux for Tegra&#8221; 21.3 install!</p>
<pre><code class="language-bash">ssh ubuntu@tegra-ubuntu.local</code></pre>

<p>At the end of the JetPack process, you need to enter the IP address of your Jetson. You can use <code>ifconfig</code> (as directed) on the Jetson to get the right IP address.</p>
<p>The JetPack process continues then and includes installing more things on the Jetson, including <code>cuda-toolkit-6-5</code>. Nice!</p>
<p>The JetPack also includes <a href="http://opencv.org/">OpenCV</a>, but doesn't seem to install it on the Jetson automatically. So move this file onto the Jetson yourself:</p>
<pre><code class="language-bash">JetPackTK1-1.1/jetpack_download/libopencv4tegra-repo_l4t-r21_2.4.10.1_armhf.deb</code></pre>

<p>On the Jetson then, install it something like the following. The package itself contains three other packages which have to be installed, and which have a couple dependencies that will need to be resolved first:</p>
<pre><code class="language-bash">sudo dpkg -i libopencv4tegra-repo_l4t-r21_2.4.10.1_armhf.deb
sudo apt-get install libavcodec54 libavformat54 libavutil52 libswscale2
sudo dpkg -i /var/opencv4tegra-repo/libopencv4tegra_2.4.10.1_armhf.deb
sudo dpkg -i /var/opencv4tegra-repo/libopencv4tegra-dev_2.4.10.1_armhf.deb
sudo dpkg -i /var/opencv4tegra-repo/libopencv4tegra-python_2.4.10.1_armhf.deb</code></pre>

<p>If you're a &#8220;CUDA Registered Developer&#8221; (they have to manually approve applications?) now might be a good time to install <a href="https://developer.nvidia.com/cuDNN">cuDNN</a> R1.</p>
<h3>2. Install the Caffe deep learning framework.</h3>
<p>Pete Warden's <a href="http://petewarden.com/2014/10/25/how-to-run-the-caffe-deep-learning-vision-library-on-nvidias-jetson-mobile-gpu-board/">post</a> on setting up Caffe on the Jetson isn't all perfectly applicable after you've flashed to L4T 21.3, but I very much appreciated his translation of the Caffe <a href="http://caffe.berkeleyvision.org/installation.html">install</a> dependencies into Ubuntu package names:</p>
<pre><code class="language-bash">sudo apt-get install \
    libprotobuf-dev protobuf-compiler gfortran \
    libboost-dev cmake libleveldb-dev libsnappy-dev \
    libboost-thread-dev libboost-system-dev \
    libatlas-base-dev libhdf5-serial-dev libgflags-dev \
    libgoogle-glog-dev liblmdb-dev gcc-4.7 g++-4.7</code></pre>

<p>The GCC 4.7 vs. 4.8 issues are resolved now I think, so the last two items there could probably be skipped.</p>
<p>Warden also advised some manual tweaks to <code>$PATH</code> and <code>$LD_LIBRARY_PATH</code>, but these are taken care of already by the install process. You may still need to <code>source ~/.bashrc</code>, depending on when you last logged in.</p>
<p>To get Python integration compiled you need <code>numpy</code>:</p>
<pre><code class="language-bash">sudo apt-get install python-numpy</code></pre>

<p>It looks like it's best to install Caffe from the <code>master</code> branch of the GitHub repository. (The <code>dev</code> branch hasn't been updated in three months.)</p>
<pre><code class="language-bash">sudo apt-get install git
git clone https://github.com/BVLC/caffe.git
cd caffe
cp Makefile.config.example Makefile.config</code></pre>

<p>Unfortunately <code>master</code> has a really large value for <code>LMDB_MAP_SIZE</code> in <code>src/caffe/util/db.cpp</code>, which confuses our little 32-bit ARM processor on the Jetson, eventually leading to Caffe tests failing with errors like <code>MDB_MAP_FULL: Environment mapsize limit reached</code>. Caffe GitHub issue <a href="https://github.com/BVLC/caffe/issues/1861">#1861</a> has some discussion about this and maybe it will be fixed eventually, but for the moment if you manually adjust the value from <code>1099511627776</code> to <code>536870912</code>, you'll be able to run all the Caffe tests successfully. I'm still having problems actually applying the relevant code paths, but at least the tests pass.</p>
<pre><code class="language-bash">make -j 4 all
make -j 4 test
make -j 4 runtest</code></pre>

<p>Then you can run the following command with a pre-built model and see that you get pretty nice prediction speed!</p>
<pre><code class="language-bash">run build/tools/caffe time --model=models/bvlc_alexnet/deploy.prototxt --gpu=0</code></pre>

<h3>3. Train a classic convolutional net on MNIST</h3>
<p>At this point you can use Caffe for whatever, including all the great tutorials! For example, there's the <a href="http://caffe.berkeleyvision.org/gathered/examples/mnist.html">MNIST tutorial</a>.</p>
<p>Since Caffe's <a href="http://symas.com/mdb/">LMDB</a> support still isn't working right on my Jetson install, I had to switch the tutorial example to use <a href="http://leveldb.org/">LevelDB</a>. This isn't too hard; just change <code>BACKEND="lmdb"</code> to <code>BACKEND="leveldb"</code> in <code>examples/mnist/create_mnist.sh</code> and then in <code>examples/mnist/lenet_train_test.prototxt</code> change both directories ending in <code>lmdb</code> to end in <code>leveldb</code> and both <code>LMDB</code>s to <code>LEVELDB</code>s.</p>
<p>Aside from that the <a href="http://caffe.berkeleyvision.org/gathered/examples/mnist.html">tutorial</a> is perfect! (Well, test accuracy gets up to 99.03%, anyway.)</p>
<p>There's a ton more to work with and think about, even just within the Caffe examples. And Caffe is just one of the available frameworks! What about <a href="http://torch.ch/">Torch</a>? What about <a href="https://code.google.com/p/cuda-convnet2/">CUDA ConvNet</a>? But for now...</p>
<p>Deep learning: Done!</p>    
    ]]></description>
<link>http://planspace.org/20150614-the_nvidia_jetson_tk1_with_caffe_on_mnist/</link>
<guid>http://planspace.org/20150614-the_nvidia_jetson_tk1_with_caffe_on_mnist/</guid>
<pubDate>Sun, 14 Jun 2015 12:00:00 -0500</pubDate>
</item>
<item>
<title>A JavaScript Perceptron</title>
<description><![CDATA[

<p>Watching <a href="https://www.coursera.org/course/neuralnets">Neural Networks for Machine Learning</a> at lunch with my class at <a href="http://www.thisismetis.com/">Metis</a>, I thought it would be fun to implement a simple <a href="http://en.wikipedia.org/wiki/Perceptron">perceptron</a> for the <a href="https://github.com/tmcw/simple-statistics">simple-statistics</a> JavaScript module.</p>
<p>And it <em>was</em> fun!</p>
<p>Now there's an open <a href="https://github.com/tmcw/simple-statistics/pull/103">pull request</a> for adding the functionality to <code>simple-statistics</code>. Here I'm pulling out just the perceptron code, as of commit <a href="https://github.com/ajschumacher/simple-statistics/commit/a5a092a7c6b5d3276acc783c712814748cd53c3f">a5a092a</a>. It's here in <a href="perceptron.js">perceptron.js</a> and also visible at the bottom of this post. It's used like this:</p>
<pre><code class="language-javascript">// Create a perceptron model:
var p = perceptron()

// Train with a feature vector [0] that has label 1,
//        and a feature vector [1] that has label 0.
p.train([0], 1)
p.train([1], 0)
p.train([0], 1)

// The perceptron has learned enough to classify correctly:
p.predict([0])
// 1
p.predict([1])
// 0</code></pre>

<p>There are just slightly fancier examples in the <a href="https://github.com/ajschumacher/simple-statistics/blob/a5a092a7c6b5d3276acc783c712814748cd53c3f/test/perceptron.test.js">tests</a>. You can use feature vectors of whatever length you like, so long as you're consistent.</p>
<p>To really use the model you have to feed it labeled examples until it (hopefully) converges to a solution. You could keep training until <code>p.weights()</code> and <code>p.bias()</code> are no longer changing, for example.</p>
<p>I recommend <a href="https://www.coursera.org/course/neuralnets">Neural Networks for Machine Learning</a>, and I recommend <a href="https://github.com/tmcw/simple-statistics">simple-statistics</a>!</p>
<p>Here's the <a href="perceptron.js">perceptron.js</a> code:</p>
<pre><code class="language-javascript">// # [Perceptron Classifier](http://en.wikipedia.org/wiki/Perceptron)
//
// This is a single-layer perceptron classifier that takes
// arrays of numbers and predicts whether they should be classified
// as either 0 or 1 (negative or positive examples).
function perceptron() {
    var perceptron_model = {},
        // The weights, or coefficients of the model;
        // weights are only populated when training with data.
        weights = [],
        // The bias term, or intercept; it is also a weight but
        // it's stored separately for convenience as it is always
        // multiplied by one.
        bias = 0;

    // ## Predict
    // Use an array of features with the weight array and bias
    // to predict whether an example is labeled 0 or 1.
    perceptron_model.predict = function(features) {
        // Only predict if previously trained
        // on the same size feature array(s).
        if (features.length !== weights.length) return null;
        // Calculate the sum of features times weights,
        // with the bias added (implicitly times one).
        var score = 0;
        for (var i = 0; i &lt; weights.length; i++) {
            score += weights[i] * features[i];
        }
        score += bias;
        // Classify as 1 if the score is over 0, otherwise 0.
        return score &gt; 0 ? 1 : 0;
    };

    // ## Train
    // Train the classifier with a new example, which is
    // a numeric array of features and a 0 or 1 label.
    perceptron_model.train = function(features, label) {
        // Require that only labels of 0 or 1 are considered.
        if (label !== 0 &amp;&amp; label !== 1) return null;
        // The length of the feature array determines
        // the length of the weight array.
        // The perceptron will continue learning as long as
        // it keeps seeing feature arrays of the same length.
        // When it sees a new data shape, it initializes.
        if (features.length !== weights.length) {
            weights = features;
            bias = 1;
        }
        // Make a prediction based on current weights.
        var prediction = perceptron_model.predict(features);
        // Update the weights if the prediction is wrong.
        if (prediction !== label) {
            var gradient = label - prediction;
            for (var i = 0; i &lt; weights.length; i++) {
                weights[i] += gradient * features[i];
            }
            bias += gradient;
        }
        return perceptron_model;
    };

    // Conveniently access the weights array.
    perceptron_model.weights = function() {
        return weights;
    };

    // Conveniently access the bias.
    perceptron_model.bias = function() {
        return bias;
    };

    // Return the completed model.
    return perceptron_model;
}</code></pre>    
    ]]></description>
<link>http://planspace.org/20150610-a_javascript_perceptron/</link>
<guid>http://planspace.org/20150610-a_javascript_perceptron/</guid>
<pubDate>Wed, 10 Jun 2015 12:00:00 -0500</pubDate>
</item>
<item>
<title>TextBlob Sentiment: Calculating Polarity and Subjectivity</title>
<description><![CDATA[

<p>The <a href="http://textblob.readthedocs.org/">TextBlob</a> package for Python is a convenient way to do a lot of Natural Language Processing (NLP) tasks. For example:</p>
<pre><code class="language-python">from textblob import TextBlob

TextBlob("not a very great calculation").sentiment
## Sentiment(polarity=-0.3076923076923077, subjectivity=0.5769230769230769)</code></pre>

<p>This tells us that the English phrase &#8220;not a very great calculation&#8221; has a <em>polarity</em> of about -0.3, meaning it is slightly negative, and a <em>subjectivity</em> of about 0.6, meaning it is fairly subjective.</p>
<p>But where do these numbers come from?</p>
<p>Let's find out by going to the source. (This will refer to <a href="https://github.com/sloria/TextBlob">sloria/TextBlob</a> on GitHub at commit <a href="https://github.com/sloria/TextBlob/tree/eb08c120d364e908646731d60b4e4c6c1712ff63">eb08c12</a>.)</p>
<p>After digging a bit, you can find that the main default sentiment calculation is defined in <a href="https://github.com/sloria/TextBlob/blob/eb08c120d364e908646731d60b4e4c6c1712ff63/textblob/_text.py">_text.py</a>, which gives credit to <a href="http://www.clips.ua.ac.be/pages/pattern-web">the pattern library</a>. (I'm not sure how much is original and how much is from <code>pattern</code>.)</p>
<p>There are helpful comments like this one, which gives us more information about the numbers we're interested in:</p>
<pre><code class="language-python"># Each word in the lexicon has scores for:
# 1)     polarity: negative vs. positive    (-1.0 =&gt; +1.0)
# 2) subjectivity: objective vs. subjective (+0.0 =&gt; +1.0)
# 3)    intensity: modifies next word?      (x0.5 =&gt; x2.0)</code></pre>

<p>The lexicon it refers to is in <a href="https://github.com/sloria/TextBlob/blob/eb08c120d364e908646731d60b4e4c6c1712ff63/textblob/en/en-sentiment.xml">en-sentiment.xml</a>, an XML document that includes the following four entries for the word &#8220;great&#8221;.</p>
<pre><code class="language-xml">&lt;word form="great" cornetto_synset_id="n_a-525317" wordnet_id="a-01123879" pos="JJ" sense="very good" polarity="1.0" subjectivity="1.0" intensity="1.0" confidence="0.9" /&gt;
&lt;word form="great" wordnet_id="a-01278818" pos="JJ" sense="of major significance or importance" polarity="1.0" subjectivity="1.0" intensity="1.0" confidence="0.9" /&gt;
&lt;word form="great" wordnet_id="a-01386883" pos="JJ" sense="relatively large in size or number or extent" polarity="0.4" subjectivity="0.2" intensity="1.0" confidence="0.9" /&gt;
&lt;word form="great" wordnet_id="a-01677433" pos="JJ" sense="remarkable or out of the ordinary in degree or magnitude or effect" polarity="0.8" subjectivity="0.8" intensity="1.0" confidence="0.9" /&gt;</code></pre>

<p>In addition to the polarity, subjectivity, and intensity mentioned in the comment above, there's also &#8220;confidence&#8221;, but I don't see this being used anywhere. In the case of &#8220;great&#8221; here it's all the same part of speech (<code>JJ</code>, adjective), and the senses are themselves natural language and not used. To simplify for readability:</p>
<pre><code class="language-text">word   polarity  subjectivity  intensity
great       1.0           1.0        1.0
great       1.0           1.0        1.0
great       0.4           0.2        1.0
great       0.8           0.8        1.0</code></pre>

<p>When calculating sentiment for a single word, TextBlob uses a sophisticated technique known to mathematicians as &#8220;averaging&#8221;.</p>
<pre><code class="language-python">TextBlob("great").sentiment
## Sentiment(polarity=0.8, subjectivity=0.75)</code></pre>

<p>At this point we might feel as if we're touring a sausage factory. That feeling isn't going to go away, but remember how delicious sausage is! Even if there isn't a lot of magic here, the results can be useful&#8212;and you certainly can't beat it for convenience.</p>
<p>TextBlob doesn't not handle negation, and that ain't nothing!</p>
<pre><code class="language-python">TextBlob("not great").sentiment
## Sentiment(polarity=-0.4, subjectivity=0.75)</code></pre>

<p>Negation multiplies the polarity by -0.5, and doesn't affect subjectivity.</p>
<p>TextBlob also handles modifier words! Here's the summarized record for &#8220;very&#8221; from the lexicon:</p>
<pre><code class="language-text">word   polarity  subjectivity  intensity
very        0.2           0.3        1.3</code></pre>

<p>Recognizing &#8220;very&#8221; as a modifier word, TextBlob will ignore polarity and subjectivity and just use intensity to modify the following word:</p>
<pre><code class="language-python">TextBlob("very great").sentiment
## Sentiment(polarity=1.0, subjectivity=0.9750000000000001)</code></pre>

<p>The polarity gets maxed out at 1.0, but you can see that subjectivity is also modified by &#8220;very&#8221; to become \( 0.75 \cdot 1.3 = 0.975 \).</p>
<p>Negation combines with modifiers in an interesting way: in addition to multiplying by -0.5 for the polarity, the inverse intensity of the modifier enters for both polarity and subjectivity.</p>
<pre><code class="language-python">TextBlob("not very great").sentiment
## Sentiment(polarity=-0.3076923076923077, subjectivity=0.5769230769230769)</code></pre>

<p>How's that?</p>
<p>\[ \text{polarity} = -0.5 \cdot \frac{1}{1.3} \cdot 0.8 \approx -0.31 \]</p>
<p>\[ \text{subjectivity} = \frac{1}{1.3} \cdot 0.75 \approx 0.58 \]</p>
<p>TextBlob will ignore one-letter words in its sentiment phrases, which means things like this will work just the same way:</p>
<pre><code class="language-python">TextBlob("not a very great").sentiment
## Sentiment(polarity=-0.3076923076923077, subjectivity=0.5769230769230769)</code></pre>

<p>And TextBlob will ignore words it doesn't know anything about:</p>
<pre><code class="language-python">TextBlob("not a very great calculation").sentiment
## Sentiment(polarity=-0.3076923076923077, subjectivity=0.5769230769230769)</code></pre>

<p>TextBlob goes along finding words and phrases it can assign polarity and subjectivity to, and it averages them all together for longer text.</p>
<p>And while I'm being a little critical, and such a system of coded rules is in some ways the antithesis of machine learning, it is still a pretty neat system and I think I'd be hard-pressed to code up a better such solution.</p>
<p>Check out <a href="https://github.com/sloria/TextBlob/blob/eb08c120d364e908646731d60b4e4c6c1712ff63/textblob/_text.py">the source</a> yourself to see all the details!</p><!-- mathjax for formulas -->

    ]]></description>
<link>http://planspace.org/20150607-textblob_sentiment/</link>
<guid>http://planspace.org/20150607-textblob_sentiment/</guid>
<pubDate>Sun, 07 Jun 2015 12:00:00 -0500</pubDate>
</item>
<item>
<title>Practical Mergic</title>
<description><![CDATA[

<p><em>A <a href="http://opendatascicon.com/schedule/practical-mergic-how-to-join-anything/">talk</a> for the <a href="http://opendatascicon.com/">Open Data Science Conference</a> in Boston on Saturday May 30, 2015. Including some material originally given in a <a href="/20150520-practical_mergic/">talk</a> for the <a href="http://www.meetup.com/nyhackr/">New York Open Statistical Programming Meetup</a> on <a href="http://www.meetup.com/nyhackr/events/222328498/">Wednesday May 20, 2015</a> and a <a href="/20150514-mergic/">lightning talk</a> at the <a href="http://www.meetup.com/PyDataNYC/events/222329250/">May meeting</a> (<a href="http://www.bloomberg.com/event-registration/?id=39288">registration</a>) of the <a href="http://www.meetup.com/PyDataNYC/">PyData NYC meetup group</a>.</em></p>
<hr>
<p></p><center>
planspace.org
<p>@planarrowspace
</p></center>
<hr>
<p>Hi! I'm Aaron. This is my blog and <a href="https://twitter.com/planarrowspace">my twitter handle</a>. You can get from one to the other. <a href="big.html">This presentation</a> and a corresponding write-up (you're reading it) are on my blog (which you're on).</p>
<p>I've also done a <a href="/20150520-practical_mergic/">longer version</a> and a <a href="/20150514-mergic/">shorter version</a> of this talk, and those are also on the blog. So if you find yourself wanting more you can get more, and if you want less I can also give you less.</p>
<p>This is probably the cheekiest of the three versions.</p>
<hr>
<p><img width="1000%" alt="Open Data Science Conference title slide for Practical Mergic with Aaron Schumacher" src="img/title_slide.png"></p>
<hr>
<p>Here's an official cover slide.</p>
<hr>
<p><img height="1000%" alt="Metis" src="img/metis.png"></p>
<hr>
<p>I teach at <a href="http://www.thisismetis.com/">Metis</a>, and I'm really happy that we're helping sponsor the Open Data Science Conference. Metis is a data science bootcamp, currently just in New York (sorry Boston). We get the best people, we have a lot of fun, and at the end out come data scientists that you could hire.</p>
<p>I could just talk about Metis, but instead I thought it'd be a good idea to talk about un-sexy everyday problems.</p>
<hr>
<p>problem</p>
<hr>
<p>In general it's just one problem, and if you work with data you have this problem.</p>
<hr>
<p>your data sucks</p>
<hr>
<p>Data is awful! You do not want to swim in a data lake. It's a mess out there!</p>
<p>Of course these days we have open data, which is a huge improvement.</p>
<hr>
<p>our data sucks</p>
<hr>
<p>So maybe we release some data sets, put them on a nice Socrata open data portal...</p>
<hr>
<pre><code class="language-text">   dbn grade year category num_tested
01M019     3 2010   Female         16
01M019     3 2010     Male         20
01M019     3 2010     Male          2</code></pre>

<hr>
<p>Here's an example of open data <a href="http://schools.nyc.gov/NR/exeres/05289E74-2D81-4CC0-81F6-E1143E28F4C4,frameless.htm">released</a> by the New York City Department of Education.</p>
<p>The <code>dbn</code> is a school identifier, and <code>grade</code> and <code>year</code> make sense. This file has the number of students tested in three categories: &#8220;Female&#8221;, &#8220;Male&#8221;, and &#8220;Male&#8221;.</p>
<p>What does that mean?</p>
<p>There are fourteen hundred extra &#8220;Male&#8221; rows like this!</p>
<p>You can look more deeply into this and conclude with some confidence that you can probably drop these extra &#8220;Male&#8221; rows. It's clearly a mistake of some kind.</p>
<hr>
<p><img width="1000%" title="This happens." src="img/this_happens.png"></p>
<hr>
<p><em>Original image from <a href="http://en.wikipedia.org/wiki/Magnolia_%28film%29">Magnolia</a> via <a href="http://indie-outlook.com/2012/09/19/jeremy-blackman-on-magnolia-pta-0s-1s-and-pink-drink/">Indie Outlook</a>.</em></p>
<p>This is a scene from a movie called Magnolia where it's raining frogs. One of the things they say in that movie is that strange things happen, and if you've worked with any variety of data sets, you've probably encountered very strange things indeed. You need to check everything&#8212;including things that you shouldn&#8217;t have to check.</p>
<p>I would also like to offer, before I get to what I'm really going to talk about, that it is a serious problem that I can't easily contribute a fix to that DOE data set. We should expect collaborative checking and editing of data sets to be part of the benefit of open data.</p>
<p>I don't know of any system currently in existence that does this well. We need something in between Wikipedia and GitHub. The <a href="http://dat-data.com/">dat project</a> isn't doing it, at least not yet. I like the architecture of <a href="http://www.datomic.com/">Datomic</a>, but it's not quite right either. <a href="https://www.wikidata.org/">Wikidata</a> might be moving in the right direction, but I'm not sure yet.</p>
<hr>
<p>problems when names are the same</p>
<hr>
<p>How is this relevant to merging? Well, lots of things can go wrong when you have exact duplicates that you aren't expecting.</p>
<hr>
<p>merge</p>
<hr>
<p>One big reason to want nice unique IDs is that you would like to merge two data sets, and you need something to match records by. Let's do a quick refresher on merging, or joining.</p>
<hr>
<p><img height="1000%" title="dplyr cheat sheet joins" src="img/dplyr_joins.png"></p>
<hr>
<p>This is a section from <a href="http://www.rstudio.com/">RStudio</a>'s <a href="http://www.rstudio.com/resources/cheatsheets/">cheatsheet</a> for <a href="https://github.com/hadley/dplyr">dplyr</a>. These cheatsheets are fantastic.</p>
<p>We'll do a merge between two data sets. For simplicity say that they have one column which is an identifier for each row, and some data in other columns. There are a couple ways we can join the data.</p>
<p>Some people like to think about these in terms of Venn diagrams.</p>
<hr>
<p><img width="1000%" title="left join" src="img/left_join.png"></p>
<hr>
<p>This picture comes from <a href="https://twitter.com/codinghorror">Jeff Atwood</a>'s post called <a href="http://blog.codinghorror.com/a-visual-explanation-of-sql-joins/">visual explanation of SQL joins</a>.</p>
<p>A former co-worker told me that seeing these pictures changed his life. I hope you like them.</p>
<p>This is a left join: you get all the keys from the left data set, regardless of whether they're in the right data set.</p>
<hr>
<p><img width="1000%" title="right join" src="img/right_join.png"></p>
<hr>
<p>Jeff Atwood doesn't have a picture of a right join on his blog, but you can make one with a little <a href="http://www.imagemagick.org/">ImageMagick</a>.</p>
<pre><code class="language-bash">$ convert -rotate 180 left_join.png right_join.png</code></pre>

<p>You're welcome.</p>
<hr>
<p><img width="1000%" title="inner join" src="img/inner_join.png"></p>
<hr>
<p>An inner join, or natural join, only gives you results for keys that appear in both the left and right data sets.</p>
<hr>
<p><img width="1000%" title="outer join" src="img/outer_join.png"></p>
<hr>
<p>And an outer join gives you everything. Great!</p>
<p>There are a few other terms we could add, but let's not.</p>
<hr>
<p><img height="1000%" title="dplyr cheat sheet joins" src="img/dplyr_joins.png"></p>
<hr>
<p>Here's the <code>dplyr</code> summary again. You can see how you can introduce missing values when doing left, right, and outer joins.</p>
<p>Ready? Here's a test.</p>
<hr>
<p>How many rows do you get when you outer join two tables?</p>
<hr>
<p>Think about this question, discuss it with somebody near you, come up with everything you can say about the number of rows you might expect when you join two tables. Introduce any quantities you think you'd like to know.</p>
<p>Take about three minutes and then come back.</p>
<p><em>three minutes pass</em></p>
<p>Say there are \( N \) rows in the first table and \( M \) rows in the second table. Then the smallest number of rows we can get from the outer join is the greater of \( N \) and \( M \). But we might get as many as \( N \cdot M \) rows, if all the keys are the same!</p>
<p>If you said the maximum was \( N + M \), you were probably assuming, implicitly or explicitly, that all they keys were unique. This is a common assumption that you should really check.</p>
<hr>
<pre><code class="language-r">&gt; nrow(first)
## [1] 3
&gt; nrow(second)
## [1] 3
&gt; result &lt;- merge(first, second)
&gt; nrow(result)
## [1] 3</code></pre>

<hr>
<p><em>This code is runnable in <a href="count_trouble.R">count_trouble.R</a>.</em></p>
<p>Is it enough to check the numbers of rows when we do joins?</p>
<p>This does an inner join, which is the default for <code>merge</code> in R. (I'm using R here as a personal favor to <a href="https://twitter.com/jaredlander">Jared Lander</a>.)</p>
<p>Think about it.</p>
<hr>
<pre><code class="language-text"> x    y1        x   y2        x    y1   y2
 1 looks        1 good        1 looks good
 2    oh        2  boy        2    oh  boy
 3  well        2   no        2    oh   no</code></pre>

<hr>
<p>There is no peace while you don't have unique IDs.</p>
<p>There are times when you don't want every ID to be unique in a table, but really really often you do. You probably want to check that uniqueness explicitly.</p>
<hr>
<p>problems when names are the same</p>
<hr>
<p>This has been a discussion of problems arising from names being the same.</p>
<hr>
<p>problems when names aren't the same</p>
<hr>
<p>And now, you probably also want to check that the intersection you get is what you expect.</p>
<p>You don't want to silently drop a ton of rows when you merge!</p>
<p>This is the beginning of our problems with names that aren't the same.</p>
<hr>
<p>let's play tennis</p>
<hr>
<p>I downloaded the <a href="https://archive.ics.uci.edu/ml/datasets/Tennis+Major+Tournament+Match+Statistics">Tennis Major Tournament Match Statistics Data Set</a> from the <a href="https://archive.ics.uci.edu/ml/">University of California, Irvine Machine Learning Repository</a>.</p>
<p>Do you know the process for getting a data set up up on the UCI ML repository?</p>
<p>The process is this: You fill in a form on their web site, and then maybe they put up your data set.</p>
<hr>
<pre><code class="language-bash">$ head -2 AusOpen-women-2013.csv | cut -c 1-40
## Player1,Player2,Round,Result,FNL1,FNL2,F
## Serena Williams,Ashleigh Barty,1,1,2,0,5

$ head -2 USOpen-women-2013.csv | cut -c 1-40
## Player 1,Player 2,ROUND,Result,FNL.1,FNL
## S Williams,V Azarenka,7,1,2,1,57,44,43,2</code></pre>

<hr>
<p>There are eight files like this. You can see that the player names are not perfectly consistent.</p>
<p>Some good people up-state New York contributed this data set, and I got in touch with them. I was curious about where the data came from; it was scraped from some web sites. Did they use it in any of their classes? Yes, it was used for some activities. Did they use it for teaching any particular data cleaning techniques? I haven't heard back since then.</p>
<hr>
<pre><code class="language-bash">$ wc -l names.txt
## 1886

$ sort names.txt | uniq | wc -l
## 669</code></pre>

<hr>
<p>So we'll take the tennis player names as our example data set. We have a file with 1,886 names, 669 of which are unique.</p>
<p>There are too many unique strings&#8212;sometimes more than one string for the same player. As a result, a count of the most common names will not accurately tell us who played the most in these 2013 tennis competitions.</p>
<hr>
<pre><code class="language-bash">$ sort names.txt | uniq -c | sort -nr | head -5
##  21 Rafael Nadal
##  17 Stanislas Wawrinka
##  17 Novak Djokovic
##  17 David Ferrer
##  15 Roger Federer</code></pre>

<hr>
<p>The list above is not the answer we&#8217;re looking for. We want to be correct.</p>
<hr>
<p>single field deduplication</p>
<hr>
<p>We're going to think about this problem, which is pretty common, of de-duplicating (or making a merge table for) a single text field.</p>
<hr>
<pre><code>Lukas Lacko             F Pennetta
Leonardo Mayer          S Williams
Marcos Baghdatis        C Wozniacki
Santiago Giraldo        E Bouchard
Juan Monaco             N.Djokovic
Dmitry Tursunov         S.Giraldo
Dudi Sela               Y-H.Lu
Fabio Fognini           T.Robredo
...                     ...</code></pre>

<hr>
<p>To be clear, the problem looks like this. And the problem often looks like this: You have either two columns with slightly different versions of identifiers, or one long list of things that you need to resolve to common names. These problems are fundamentally the same.</p>
<p>Do you see the match here? (It's Santiago!)</p>
<p>So we need to find the strings that refer to the same person.</p>
<hr>
<p><img width="1000%" title="Open Refine" src="img/open_refine.png"></p>
<hr>
<p><a href="http://openrefine.org/">Open Refine</a> is quite good.</p>
<p>An interesting side story is that Open Refine was formerly Google Refine, and before that <a href="http://en.wikipedia.org/wiki/Metaweb">Metaweb</a>'s &#8220;Freebase Gridworks&#8221;. Google is shutting down <a href="http://www.freebase.com/">Freebase</a>, and we have to hope that <a href="https://www.wikidata.org/">Wikidata</a> will then be the open match for Google's <a href="http://en.wikipedia.org/wiki/Knowledge_Graph">Knowledge Graph</a>.</p>
<p>Open Refine is quite good, but there are several things I wish it did differently.</p>
<p>For one, although it has an internal record of changes, the interface Open Refine exposes changes your data in place. That's not okay.</p>
<hr>
<pre><code class="language-text">Cluster ID,name
1,Lukas Lacko
2,Leonardo Mayer
3,Marcos Baghdatis
...</code></pre>

<hr>
<p>One way to keep output from a deduplication process is a merge table like this. The <code>csvdedupe</code> interface on the Python <a href="https://github.com/datamade/dedupe">dedupe</a> project from <a href="http://datamade.us/">DataMade</a> in Chicago will give you this kind of output. It's much better than no accessible record of the transformation, but it's also not a format I want to look at, as a human.</p>
<hr>
<pre><code class="language-json">{
    "Ann's group": [
        "Ann"
    ],
    "Bob's group": [
        "Bob",
        "Robert"
    ]
}</code></pre>

<hr>
<p>Here's a format that I propose could be usable for describing deduplication. It's as readable by humans as any <a href="http://json.org/">JSON</a>, and it can be easily produced and consumed by anything that speaks JSON, which is everything.</p>
<hr>
<pre><code class="language-text">new,original
Ann's group,Ann
Bob's group,Bob
Bob's group,Robert</code></pre>

<hr>
<p>You can still produce a merge table from the JSON representation, and it will have whatever new keys you specify, possibly human-readable ones.</p>
<hr>
<p><img height="1000%" title="ermahgerd mergic" src="img/ermahgerd.png"></p>
<hr>
<p><code>mergic</code> is a tool that supports doing deduplication with these conventions.</p>
<hr>
<ul>
<li>simple</li>
<li>customizable</li>
<li>reproducible</li>
</ul>
<hr>
<p>The goals of <code>mergic</code> are to be:</p>
<ul>
<li>simple, meaning largely text-based and obvious; the tool disappears</li>
<li>customizable, meaning you can easily use a custom distance function</li>
<li>reproducible, meaning everything you do can be done again automatically</li>
</ul>
<hr>
<p>the tool disappears</p>
<hr>
<p>Good tools disappear.</p>
<p>Whatever text editor you use, the your work product is a text file. You can use any text editor, or use different ones for different purposes, and so on.</p>
<p>Your merge process shouldn't rely on any particular piece of software for its replicability.</p>
<hr>
<p>any distance function</p>
<hr>
<p>Your distance function can make all the difference. You need to be able to plug in any distance function that works well for your data.</p>
<hr>
<p>really reproducible</p>
<hr>
<p>People can see what's happening, and computers can keep doing the process without clicking or re-running particular executables.</p>
<hr>
<p><img width="1000%" title="big data" src="img/big_data.png"></p>
<hr>
<p>A quick disclaimer!</p>
<p>This is John Langford's slide, about what big data is. He says that small data is data for which \( O(n^2) \) algorithms are feasible. Currently <code>mergic</code> is strictly for this kind of "artisanal" data, where we want to ensure that our matching is correct but want to reduce the amount of human work to ensure that. And we are about to get very \( O(n^2) \).</p>
<hr>
<pre><code>Santiago Giraldo,Leonardo Mayer
Santiago Giraldo,Dudi Sela
Santiago Giraldo,Juan Monaco
Santiago Giraldo,S Williams
Santiago Giraldo,C Wozniacki
Santiago Giraldo,S.Giraldo
Santiago Giraldo,Marcos Baghdatis
Santiago Giraldo,Y-H.Lu
...</code></pre>

<hr>
<p>So we make all possible pairs of identifiers!</p>
<p>One of the things that Open Refine gets right is that it doesn't show us humans all the pairs it's looking at.</p>
<p>All these pairs are annoying for a computer, and awful for humans. The computer can calculate a lot of pairwise distances, but I don't want to look at all the pairs.</p>
<p>Do you see the match here? (It's Santiago again!)</p>
<hr>
<pre><code>Karolina Pliskova,K Pliskova</code></pre>

<hr>
<p>Aside from being a drag to look at, there's a bigger problem with verifying equality on a pairwise basis.</p>
<p>Do these two records refer to the same person? (Tennis fans may see where I'm going with this.)</p>
<hr>
<pre><code>Kristyna Pliskova,K Pliskova</code></pre>

<hr>
<p>Karolina has a twin sister, and Kristyna also plays professional tennis! This may well not be obvious if you only look at pairs individually. What matters is the set of names that are transitively judged as equal.</p>
<hr>
<p>sets &gt; pairs</p>
<hr>
<p>Both perceptually and logically, it's better to think in sets than in a bunch of individual pairs.</p>
<hr>
<p>workflow support for reproducible deduplication and merging</p>
<hr>
<p>This is what <code>mergic</code> is for. <code>mergic</code> is a simple tool designed to make it less painful when you need to merge things that don't yet merge.</p>
<hr>
<p>demo: mergic tennis</p>
<hr>
<p>With all that background, let's see how <code>mergic</code> attempts to support a good workflow.</p>
<pre><code class="language-bash">$ pew new odsc</code></pre>

<p>I'll start by making a new <a href="https://virtualenv.pypa.io/">virtual environment</a> using <a href="https://github.com/berdario/pew">pew</a>.</p>
<pre><code class="language-bash">$ pip install mergic</code></pre>

<p><code>mergic</code> is very new (version 0.0.6) and it currently installs with no extra dependencies.</p>
<pre><code class="language-bash">$ mergic -h</code></pre>

<p><code>mergic</code> includes a command-line script based on <a href="https://docs.python.org/2/library/argparse.html">argparse</a> that uses a default string distance function.</p>
<pre><code>usage: mergic [-h] {calc,make,check,diff,apply,table} ...

positional arguments:
  {calc,make,check,diff,apply,table}
    calc                calculate all partitions of data
    make                make a JSON partition from data
    check               check validity of JSON partition
    diff                diff two JSON partitions
    apply               apply a patch to a JSON partition
    table               make merge table from JSON partition

optional arguments:
  -h, --help            show this help message and exit</code></pre>

<p>In the tennis data, names appear sometimes with full first names and sometimes with only first initials. To get good comparisons, we should:</p>
<ul>
<li>Transform all the data to the same format, as nearly as possible.</li>
<li>Use a good distance on the transformed data.</li>
</ul>
<p>We can do both of these things with a simple custom script, <a href="tennis/tennis_mergic.py">tennis_mergic.py</a>. It only <a href="requirements.txt">requires</a> the <code>mergic</code> and <code>python-Levenshtein</code> packages.</p>
<pre><code class="language-python">#!/usr/bin/env python

import re
import Levenshtein
import mergic


def first_initial_last(name):
    initial = re.match("^[A-Z]", name).group()
    last = re.search("(?&lt;=[ .])[A-Z].+$", name).group()
    return "{}. {}".format(initial, last)


def distance(x, y):
    x = first_initial_last(x)
    y = first_initial_last(y)
    return Levenshtein.distance(x, y)


mergic.Blender(distance).script()</code></pre>

<p>Note that there's a transformation step in there, normalizing the form of the names to have just a first initial and last name. This kind of normalization can be very important.</p>
<p>As a more extreme example, a friend of mine has used the following transform: Google it. Then you can use a distance on the result set to deduplicate.</p>
<p>Now <a href="tennis/tennis_mergic.py">tennis_mergic.py</a> can be used just like the standard <code>mergic</code> script.</p>
<pre><code class="language-bash">$ ./tennis_mergic.py calc names.txt
## num groups, max group, num pairs, cutoff
## ----------------------------------------
##        669,         1,         0, -1
##        358,         5,       384, 0
##        348,         6,       414, 1
##        332,         6,       470, 2
##        262,        85,      5117, 3
##        165,       324,     52611, 4
##         86,       496,    122899, 5
##         46,       584,    170287, 6
##         24,       624,    194407, 7
##         16,       641,    205138, 8
##         10,       650,    210940, 9
##          4,       663,    219459, 10
##          2,       668,    222778, 11
##          1,       669,    223446, 12</code></pre>

<p>There is a clear best cutoff here, as the size of the max group jumps from 6 items to 85 and the number of within-group comparisons jumps from 470 to 5,117. So we create a partition where the Levenshtein distance between names in our standard first initial and last name format is no more than two, and put the result in a file called <code>groups.json</code>:</p>
<pre><code class="language-bash">$ ./tennis_mergic.py make names.txt 2 &gt; groups.json</code></pre>

<p>This kind of JSON grouping file could be produced and edited by anything, not just <code>mergic</code>.</p>
<p>As expected, the proposed grouping has combined things over-zealously in some places:</p>
<pre><code class="language-bash">$ head -5 groups.json
## {
##     "Yen-Hsun Lu": [
##         "Di Wu",
##         "Yen-Hsun Lu",
##         "Y-H.Lu",</code></pre>

<p>Manual editing can produce a corrected version of the original grouping, which could be saved as <code>edited.json</code>:</p>
<pre><code class="language-bash">$ head -8 edited.json
## {
##     "Yen-Hsun Lu": [
##         "Yen-Hsun Lu",
##         "Y-H.Lu"
##     ],
##     "Di Wu": [
##         "Di Wu"
##     ],</code></pre>

<p>Parts of the review process would be difficult or impossible for a computer to do accurately.</p>
<p>After editing, you can check that the new grouping is still valid. At this stage we aren't using anything custom any more, so the default <code>mergic</code> is fine:</p>
<pre><code class="language-bash">$ mergic check edited.json
## 669 items in 354 groups</code></pre>

<p>The <code>mergic</code> diffing tools make it easy to make comparisons that would otherwise be difficult, letting us focus on and save only changes that are human reviewers make rather than whole files.</p>
<pre><code class="language-bash">$ mergic diff groups.json edited.json &gt; diff.json</code></pre>

<p>Now <code>diff.json</code> only has the entries that represent changes from the original <code>groups.json</code>.</p>
<p>The edited version can be reconstructed from the original and the diff with <code>mergic apply</code>:</p>
<pre><code class="language-bash">$ mergic apply groups.json diff.json &gt; rebuilt.json</code></pre>

<p>The order of <code>rebuilt.json</code> may not be identical to the original <code>edited.json</code>, but the diff will be empty, meaning the file is equivalent:</p>
<pre><code class="language-bash">$ mergic diff edited.json rebuilt.json
## {}</code></pre>

<p>Finally, to generate a CSV merge table that you'll be able to use with any other tool:</p>
<pre><code class="language-bash">$ mergic table edited.json &gt; merge.csv</code></pre>

<p>Now the file <code>merge.csv</code> has two columns, <code>original</code> and <code>mergic</code>, where <code>original</code> contains all the values that appeared in the original data and <code>mergic</code> contains the deduplicated keys. You can join this on to your original data and go to town.</p>
<p>Here's how we might do that to quickly get a list of who played the most in these 2013 tennis events:</p>
<pre><code class="language-bash">$ join -t, &lt;(sort names.txt) &lt;(sort merge.csv) | cut -d, -f2 | sort | uniq -c | sort -nr | head
##  24 Novak Djokovic
##  22 Rafael Nadal
##  21 Serena Williams
##  21 David Ferrer
##  20 Na Li
##  19 Victoria Azarenka
##  19 Agnieszka Radwanska
##  18 Stanislas Wawrinka
##  17 Tommy Robredo
##  17 Sloane Stephens</code></pre>

<p>Note that this is not the same as the result we got before resolving these name issues:</p>
<pre><code class="language-bash">$ sort names.txt | uniq -c | sort -nr | head
##  21 Rafael Nadal
##  17 Stanislas Wawrinka
##  17 Novak Djokovic
##  17 David Ferrer
##  15 Roger Federer
##  14 Tommy Robredo
##  13 Richard Gasquet
##  11 Victoria Azarenka
##  11 Tomas Berdych
##  11 Serena Williams</code></pre>

<p>As it happens, using a cutoff of 0 and doing no hand editing will still give the correct top ten. In general the desired result and desired level of certainty in its correctness will inform the level of effort that is justified.</p>
<hr>
<p>distance matters</p>
<hr>
<p>Having a good distance function might be the most important thing. It's hard to imagine a machine learning as good a distance function as you could just right based on your human intelligence.</p>
<p>There is work on learnable edit distances; notably there's a current Python project to implement hidden alignment conditional random fields for classifying string pairs: <a href="https://github.com/dirko/pyhacrf">pyhacrf</a>. Python dedupe is <a href="https://github.com/datamade/dedupe/issues/14">eager</a> to incorporate this.</p>
<p>See also: <a href="http://www.cs.utexas.edu/users/ml/papers/marlin-kdd-03.pdf">Adaptive Duplicate Detection Using Learnable String Similarity Measures</a></p>
<hr>
<p>extension to multiple fields</p>
<hr>
<p>We've been talking about single field deduplication.</p>
<hr>
<pre><code class="language-text">name
----
Bob
Rob
Robert</code></pre>

<hr>
<p>This means that we have one field, say name.</p>
<hr>
<pre><code class="language-text">name, name
----------
Bob, Bobby
Bob, Robert
Bobby, Robert</code></pre>

<hr>
<p>And we look at all the possible pairs and calculate those pairwise distances.</p>
<hr>
<p><img width="1000%" title="one dimensional" src="img/one_dimensional.png"></p>
<hr>
<p>While we described it even in Open Refine as &#8220;clustering&#8221;, we've really been doing a classification task: either a pair is in the same group or they aren't. We've had one dimension, and we hope that we can just divide true connections from different items with a simple cutoff.</p>
<hr>
<pre><code class="language-text">name,    hometown
-----------------
Bob,     New York
Rob,     NYC
Robert,  "NY, NY"</code></pre>

<hr>
<p>Often, there's more than one field involved, and it might be good to treat all the fields separately.</p>
<p>So let's calculate distances between each field entry for each pair of rows, in this case.</p>
<hr>
<p><img height="1000%" title="two dimensional" src="img/two_dimensional.png"></p>
<hr>
<p>The reason it might be good to treat the fields separately is that they might be more useful together; we might be able to classify all the true duplicates using the information from both fields.</p>
<p>Maybe you can find two clusters, one for true duplicates and one for different items.</p>
<p>Or maybe you could get some training data and use whatever classification algorithm you like.</p>
<p>The Python <a href="https://github.com/datamade/dedupe">dedupe</a> project and the R <a href="">RecordLinkage</a> package do this.</p>
<p>The <code>csvdedupe</code> interface using <code>dedupe</code> even asks us to clarify things, doing a live training phase. The hope is that it will learn what matters.</p>
<p>You can also build this kind of behavior into your own systems; there is an <a href="http://datamade.github.io/dedupe-examples/docs/csv_example.html">example</a>.</p>
<hr>
<p>real clustering?</p>
<hr>
<p>The &#8220;clustering&#8221; that we've been doing hasn't been much like usual clustering.</p>
<hr>
<p><img width="1000%" title="one dimensional" src="img/one_dimensional.png"></p>
<hr>
<p>In part, this is because we we've only had distances between strings without having a real &#8220;string space&#8221;.</p>
<p>I'm going to just sketch out this direction; I think it's interesting but I haven't seen any real results in it yet.</p>
<hr>
<p>dog, doge, kitten, kitteh</p>
<hr>
<p>Say these are the items we're working with. We can use Levenshtein edit distance to make a distance matrix.</p>
<hr>
<pre><code class="language-text">       dog doge kitten kitteh
   dog   0    1      6      6
  doge   1    0      5      5
kitten   6    5      0      1
kitteh   6    5      1      0</code></pre>

<hr>
<p>So here's a distance matrix, and it looks the way we'd expect. But we still don't have <em>coordinates</em> for our words.</p>
<p>Luckily, there is at least one technique for coming up with coordinates when you have a distance matrix. Let's use <a href="http://en.wikipedia.org/wiki/Multidimensional_scaling">multidimensional scaling</a>! There's a nice <a href="http://scikit-learn.org/stable/auto_examples/manifold/plot_mds.html">implementation in sklearn</a>.</p>
<hr>
<pre><code class="language-python">from sklearn.manifold import MDS
mds = MDS(dissimilarity='precomputed')
coords = mds.fit_transform(distances)</code></pre>

<hr>
<p>Here's all the code it takes.</p>
<hr>
<p><img width="1000%" title="MDS coordinates from distance matrix" src="img/mds_words.png"></p>
<hr>
<p>And here's the result! This is at least a fun visualization, and I wonder if doing clustering in a space like this might sometimes lead to better results.</p>
<p>The key thing here is that we're clustering on the elements themselves, rather than indirectly via the pairwise distances.</p>
<p>There are other ways of getting coordinates for words. This includes the very interesting <a href="https://code.google.com/p/word2vec/">word2vec</a> and related techniques.</p>
<p>Also, you might have items are already naturally coordinates, for example if you have medical data like a person's height or weight.</p>
<hr>
<p>open</p>
<hr>
<p>This is the Open Data Science Conference, right?</p>
<p>This mergic project is something I think could be a good direction for particular kinds of data problems. Of course it's <a href="https://github.com/ajschumacher/mergic">on GitHub</a> and of course I'd love help in making it something that might actually help people.</p>
<p>Our community is bigger than any one problem or any one solution, and I want to hear about what problems are real for you and what solutions you're excited about.</p>
<hr>
<p>Thanks!</p>
<hr>
<p>Thanks for listening&#8212;let's talk!</p>
<hr>
<p></p><center>
planspace.org
<p>@planarrowspace
</p></center>
<hr>
<p>This is just me again.</p><!-- mathjax for formulas -->

    ]]></description>
<link>http://planspace.org/20150530-practical_mergic_at_odsc/</link>
<guid>http://planspace.org/20150530-practical_mergic_at_odsc/</guid>
<pubDate>Sat, 30 May 2015 12:00:00 -0500</pubDate>
</item>
  </channel>
</rss>
