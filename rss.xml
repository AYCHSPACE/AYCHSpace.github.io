<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>plan âž” space</title>
    <link>http://planspace.org/</link>
    <description>plan space from outer nine</description>
    <language>en-us</language>
    <atom:link href="http://planspace.org/rss.xml" rel="self" type="application/rss+xml" />
<item>
<title>Q-Learning Tic-Tac-Toe, Briefly</title>
<description><![CDATA[

<p><a href="https://en.wikipedia.org/wiki/Tic-tac-toe">Tic-tac-toe</a> doesn't call for <a href="/20171114-deep_rl/">reinforcement learning</a>, except as
an exercise or illustration. Recently, I saw several examples
implementing <a href="https://en.wikipedia.org/wiki/Q-learning">Q-learning</a>, all of which were rather long. I thought
I'd give tic-tac-toe with Q-learning a <a href="https://github.com/ajschumacher/ajschumacher.github.io/blob/master/20191103-q_learning_tic_tac_toe_briefly/q_learning_tic_tac_toe.ipynb">try</a> myself, using Python
and TensorFlow, aiming for brevity.</p>
<p>The board is represented with a matrix, where zero means empty.</p>
<pre><code class="language-python">def new_board(size):
    return np.zeros(shape=(size, size))</code></pre>

<p>Moves are represented by their coordinates, like <code>[0, 0]</code> for the
upper left.</p>
<pre><code class="language-python">def available_moves(board):
    return np.argwhere(board == 0)</code></pre>

<p>The first player is <code>+1</code> and the second player is <code>-1</code>, so having
three in a row means getting a row, column, or diagonal to sum to <code>+3</code>
or <code>-3</code>, respectively.</p>
<pre><code class="language-python">def check_game_end(board):
    best = max(list(board.sum(axis=0)) +    # columns
               list(board.sum(axis=1)) +    # rows
               [board.trace()] +            # main diagonal
               [np.fliplr(board).trace()],  # other diagonal
               key=abs)
    if abs(best) == board.shape[0]:  # assumes square board
        return np.sign(best)  # winning player, +1 or -1
    if available_moves(board).size == 0:
        return 0  # a draw (otherwise, return None by default)</code></pre>

<p>Q-learning will require some state, so a player will be an object with
a <code>move</code> method that takes a board and returns the coordinates of the
chosen move. Here's a random player:</p>
<pre><code class="language-python">class RandomPlayer(Player):
    def move(self, board):
        return random.choice(available_moves(board))</code></pre>

<p>This is sufficient for the game loop, starting from any initial board:</p>
<pre><code class="language-python">def play(board, player_objs):
    player = +1
    game_end = check_game_end(board)
    while game_end is None:
        move = player_objs[player].move(board)
        board[tuple(move)] = player
        game_end = check_game_end(board)
        player *= -1  # switch players
    return game_end</code></pre>

<p>So this plays out a game between two random players and gives the
result:</p>
<pre><code class="language-python">play(new_board(3), {+1: RandomPlayer(), -1: RandomPlayer()})</code></pre>

<p>Playing out 10,000 games, it's clear that the first random player is
more likely to win, and also that results can vary a good deal even
when averaging over 500 games.</p>
<p><img alt="3x3 tic-tac-toe, two random players" src="img/3x3random-random.png"></p>
<p>Here's a boring player that chooses the first available move from left
to right, top to bottom:</p>
<pre><code class="language-python">class BoringPlayer(Player):
    def move(self, board):
        return available_moves(board)[0]</code></pre>

<p>Games between boring players always end the same way. The comparison
with the random player is more interesting. This table give results
for 10,000 games per row:</p>
<pre><code>| Size | First Player | Second Player | Draw |
|------|--------------|---------------|------|
| 3x3  | Random: 59%  | Random: 29%   | 12%  |
| 3x3  | Boring: 78%  | Random: 18%   |  4%  |
| 3x3  | Random: 52%  | Boring: 44%   |  4%  |</code></pre>

<p>The boring player does better than a random player whether it plays
first or second. Now we have multiple "baselines." A learning agent
should do better than the baselines.</p>
<p>The Q-learning player starts with a neural network that takes a board
as input and produces an estimate of how good each move is from that
position: Q-values.</p>
<pre><code class="language-python">class Agent(Player):
    def __init__(self, size):
        self.size = size
        self.model = tf.keras.Sequential()
        self.model.add(tf.keras.layers.Dense(size**2))
        self.model.compile(optimizer='sgd', loss='mean_squared_error')</code></pre>

<p>A couple helper methods make the interface nicer for using and
training the neural net. (There may be a better way of achieving
this.)</p>
<pre><code class="language-python">    def predict_q(self, board):
        return self.model.predict(
            np.array([board.ravel()])).reshape(self.size, self.size)

    def fit_q(self, board, q_values):
        self.model.fit(
            np.array([board.ravel()]), np.array([q_values.ravel()]), verbose=0)</code></pre>

<p>The Q-learning agent preserves some history, which is reset when a new
game starts.</p>
<pre><code class="language-python">    def new_game(self):
        self.last_move = None
        self.board_history = []
        self.q_history = []</code></pre>

<p>The <code>move</code> method uses the Q-network to choose the best available move
and then calls the <code>reward</code> method to operationalize Q-learning's
<a href="https://en.wikipedia.org/wiki/Bellman_equation#The_Bellman_equation">Bellman equation</a>.</p>
<pre><code class="language-python">    def move(self, board):
        q_values = self.predict_q(board)
        temp_q = q_values.copy()
        temp_q[board != 0] = temp_q.min() - 1  # no illegal moves
        move = np.unravel_index(np.argmax(temp_q), board.shape)
        value = temp_q.max()
        if self.last_move is not None:
            self.reward(value)
        self.board_history.append(board.copy())
        self.q_history.append(q_values)
        self.last_move = move
        return move</code></pre>

<p>The <code>reward</code> method trains the Q-network, updating a previous estimate
of Q-values with a new estimate for the last chosen move.</p>
<pre><code class="language-python">    def reward(self, reward_value):
        new_q = self.q_history[-1].copy()
        new_q[self.last_move] = reward_value
        self.fit_q(self.board_history[-1], new_q)</code></pre>

<p>Using a <code>play</code> function that resets games and delivers a reward of
<code>+1</code> for wins and <code>-1</code> for losses and draws (see the full
<a href="https://github.com/ajschumacher/ajschumacher.github.io/blob/master/20191103-q_learning_tic_tac_toe_briefly/q_learning_tic_tac_toe.ipynb">notebook</a>), a Q-learning agent plays a random agent:</p>
<p><img alt="3x3 tic-tac-toe, q-learning vs. random player" src="img/3x3qlearn-random.png"></p>
<p>The Q-learning player quickly achieves much stronger play than the
baselines.</p>
<pre><code>| Size | First Player | Second Player | Draw |
|------|--------------|---------------|------|
| 3x3  | Random:  59% | Random:  29%  | 12%  |
| 3x3  | Boring:  78% | Random:  18%  |  4%  |
| 3x3  | Random:  52% | Boring:  44%  |  4%  |
| 3x3  | Q-Learn: 93% | Random:   6%  |  1%  |
| 3x3  | Random:  21% | Q-Learn: 78%  |  1%  |</code></pre>

<p>(For Q-learning players, they play 10,000 games while learning and
then another 10,000 games while frozen to evaluate their performance
level after learning, which is what's shown in the table.)</p>
<p>And that's it! Tic-tac-toe with a Q-learning agent, comfortably under
100 lines of code.</p>
<hr>
<h3>Ideas for doing more</h3>
<ul>
<li>The Q-learning player didn't achieve a "perfect" strategy in which
   it never loses. Why not? Can you fix it? Further ideas below may
   contribute to a solution.</li>
<li>You can write your own perfect tic-tac-toe player, or use a package
   like <a href="https://github.com/dwayne/xo-python">xo</a>. How does the Q-learning player do against a perfect
   player?</li>
<li>The initialization of the network and the play of the random
   opponent vary from run to run. How consistent are results? How do
   they vary? What source of randomness matters more?</li>
<li>Draws require nine moves, but it's possible to win in five. How
   does game length vary by player strategy and over the course of
   training the Q-learning player?</li>
<li>The Q-learning algorithm here is simplified, with no reward decay,
   for example. Can you re-complicate the algorithm and perhaps
   achieve shorter game lengths?</li>
<li>There is no explicit exploration mechanism in the Q-learning
   algorithm here. Can you add one and improve performance?</li>
<li>What happens when the Q-learning player plays against the boring
   player, and what does this suggest?</li>
<li>What happens when a Q-learning player plays against one type of
   player, and then faces a different player? How can this vary and
   what does it suggest?</li>
<li>None of the players in these implementations are ever told which
   player they are, and none of them explicitly work it out for
   themselves, though this is possible. How does a Q-learning player
   that has played as first player do when made to play as second
   player instead? Can you improve this?</li>
<li>How effective is self-play (Q-learning player vs. another
   Q-learning player)?</li>
<li>Can you quantify the sample efficiency of the Q-learning algorithm,
   which should capture how many games or moves the algorithm needs to
   learn a good strategy?</li>
<li>There are lots of enhancements to Q-learning, for example
   <a href="https://www.cs.toronto.edu/~vmnih/docs/dqn.PDF">experience replay</a>. Can you improve sample efficiency using such
   a mechanism?</li>
<li>There are symmetries in the tic-tac-toe board; can you take
   advantage of these?</li>
<li>The neural network used here is very simple. It is not at all
   "deep," for example. Does a more sophisticated network architecture
   give better results?<ul>
<li>Convolutional filters are useful in neural networks for
   computer vision. Can this kind of domain-specific approach
   inform an architecture design specialized for tic-tac-toe?</li>
</ul>
</li>
<li>Lots of defaults are used in the implementation here, for example
   for the neural network's learning rate. Can you find better values?</li>
<li>The rewards for a loss and a tie are both <code>-1</code> in the
   implementation here. What happens when ties aren't as bad as
   losses? Is zero a good reward for a tie?</li>
<li>The code shown here aims to be brief. Is this good or bad for
   readability, maintainability, and extensibility? Are other
   characteristics also important? How can you improve the code?</li>
<li>Experiment with different board sizes:</li>
</ul>
<pre><code>| Size | First Player | Second Player | Draw |
|------|--------------|---------------|------|
| 3x3  | Random: 59%  | Random: 29%   | 12%  |
| 4x4  | Random: 31%  | Random: 27%   | 42%  |
| 5x5  | Random: 25%  | Random: 15%   | 60%  |</code></pre>

<p>As the board gets bigger, the advantage of going first decreases and
the probability of a draw goes up considerably.</p>
<p>It also takes a good deal more games to learn a good strategy:</p>
<p><img alt="3x3 tic-tac-toe, q-learning vs. random player" src="img/5x5qlearn-random.png"></p>
<p>For the implementations here, some results are as follows:</p>
<pre><code>| Size | First Player | Second Player | Draw |
|------|--------------|---------------|------|
| 4x4  | Random:  31% | Random:  27%  | 42%  |
| 4x4  | Q-Learn: 83% | Random:  10%  |  7%  |
| 4x4  | Random:  11% | Q-Learn: 80%  |  9%  |
| 5x5  | Random:  25% | Random:  15%  | 60%  |
| 5x5  | Q-Learn: 79% | Random:   5%  | 16%  |
| 5x5  | Random:  18% | Q-Learn: 53%  | 29%  |</code></pre>

<p>What is optimal for these larger boards? How well can you do? At what
point is a Q-learning approach more effective (considering the trade
with compute time) than exhaustive minimax search, if ever?</p>    
    ]]></description>
<link>http://planspace.org/20191103-q_learning_tic_tac_toe_briefly/</link>
<guid>http://planspace.org/20191103-q_learning_tic_tac_toe_briefly/</guid>
<pubDate>Sun, 03 Nov 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>Influence, by Cialdini</title>
<description><![CDATA[

<p><a href="https://en.wikipedia.org/wiki/Influence:_Science_and_Practice">Influence: Science and Practice</a> is a sort of cross between <a href="/2011/03/05/how-to-win-friends-and-influence-people/">How to Win Friends and Influence People</a> and <a href="/2011/12/17/selections-from-and-thoughts-on/">Thinking, Fast and Slow</a>. Originally published well before Kahneman's popular book, it cites some of his earlier work. <em>Influence</em> describes six principles used by "compliance professionals," a category rather broader than "marketers."</p>
<ol>
<li>Reciprocation</li>
<li>Commitment/Consistency</li>
<li>Social proof</li>
<li>Liking</li>
<li>Authority</li>
<li>Scarcity</li>
</ol>
<p>I believe it was this book that popularized the term "social proof"&#8212;<em>Influence</em> has been influential. I heard about the book in <a href="/20190824-100_startup/">The $100 Startup</a>.</p>
<p>The tone can be militant. The principles are called "weapons of influence" and the examples include the Jonestown Massacre and techniques used on American prisoners during the Korean War. Referring to "boycott, threat, confrontation, censure, tirade, nearly anything to retaliate," Cialdini says "I don't consider myself pugnacious by nature, but I actively advocate such beligerent actions because in a way I am at war with the exploiters."</p>
<blockquote>
<p>I have recently become impressed by evidence suggesting that the
form and pace of modern life is not allowing us to make fully
thoughtful decisions, even on many personally relevant topics. That
is, sometimes the issues may be so complicated, the time so tight,
the distractions so intrusive, the emotional arousal so strong, or
the mental fatigue so deep that we are in no cognitive condition to
operate mindfully.</p>
</blockquote>
<p>Largely a collection of anecdotes and research results presented as stories, <em>Influence</em> plays hard into the tendency of readers to reason from the specific to the general. This includes at least one example I know to be at least partially debunked in connection with <a href="https://en.wikipedia.org/wiki/Murder_of_Kitty_Genovese">the bystander effect</a>.</p>
<p>In connection with the "Liking" principle, I was interested to learn something I hadn't been aware of previously about the <a href="https://en.wikipedia.org/wiki/Jigsaw_(teaching_technique)">jigsaw</a> teaching technique: that it was designed "to help weaken racial cliques in forcibly integrated schools." I feel like I should have known that earlier!</p>
<p>One other fun connection was to the machine learning idea of <a href="https://en.wikipedia.org/wiki/Overfitting">overfitting</a>. Kahneman's automatic "<a href="https://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow#Two_systems">system one</a>" thinking is helpful but can lead to errors, often because it focuses on just one feature of a situation. Biological intelligence is sometimes held up as not having any drawbacks of ML, but it's interesting to draw this parallel.</p>
<p>This book was first published in 1984. I read the fifth edition, which has been updated so that on page 219 there's a picture of an Apple store with a caption about "the china department of Harrod's." <a href="https://en.wikipedia.org/wiki/Robert_Cialdini">Cialdini</a> is 74 now. His book has been successful.</p>
<p><img alt="Influence cover" src="influence.jpg"></p>    
    ]]></description>
<link>http://planspace.org/20191009-influence_by_cialdini/</link>
<guid>http://planspace.org/20191009-influence_by_cialdini/</guid>
<pubDate>Wed, 09 Oct 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>How to be Miserable, by Paterson</title>
<description><![CDATA[

<p>CGP Grey recommended this <a href="https://www.newharbinger.com/how-be-miserable">book</a> in his <a href="https://www.youtube.com/watch?v=LO1mTELoj6o">video</a> highlighting seven
of its "40 strategies you already use" to increase misery. It's a fun,
quick read, during which occasionally some things may hit close to
home and force you to remind yourself that the advice is deliberately
bad. I especially liked "Lesson 20: Work Endlessly on Your
Self-Esteem."</p>
<hr>
<h3>Lesson 20: Work Endlessly on Your Self-Esteem</h3>
<p>Do you have a cat? If so, does it seem to think well of itself, or
does it appear to slink around in deep shame at being an inferior sort
of feline?</p>
<p>Most people sense that the cats they know have perfectly high
self-esteem&#8288;&#8212;despite never having had psychotherapy, attending no
esteem-building workshops, and reading very few self-help books. How
do they do it?</p>
<p>We live in a culture with a deep and abiding faith in the concept of
self-esteem. To follow this particular path downward, all you have to
do is go along with the crowd. Like them, view self-esteem as
something that you are born without and must build up, brick by brick,
into a tall and sturdy structure. Assume that self-esteem is something
separate from confidence in your ability to perform any particular
task, like juggling or changing the oil in your car. This makes it
vague and amorphous enough that constructing it becomes a futile&#8288;&#8212;and
thus misery-inducing&#8288;&#8212;effort.</p>
<p>But wait. Isn't self-esteem real? You've been taught about it since
birth. It can't possibly be just another Easter Bunny, can it?</p>
<p>Let's find out. Imagine a person with terrible self-esteem visiting
the bank and then walking to a caf&#233; for lunch. What's he thinking
about?</p>
<blockquote>
<p><em>I probably looked like an idiot when I dropped my pen back there,
and the teller could see my bank balance&#8212;she probably thought I'm a
complete failure. Even now, these people on the sidewalk can see
what a loser I am, and my hair is sticking up everywhere. When I get
lunch, I'll probably spill it on myself and look even worse.</em></p>
</blockquote>
<p>Sound plausible?</p>
<p>Now imagine a person with great self-esteem doing the same thing.
What's he thinking about?</p>
<blockquote>
<p><em>Wow, I really impressed them all at the bank back there&#8212;when I bent
over to pick up my pen they could see how toned my rear end is,
after all that work at the gym, and my balance probably made the
teller drool. Look at all these lucky people sharing the sidewalk
with me, envying me for my great hair. And when I get to the caf&#233;,
they'll put me at the table in the front window to attract other
customers. Hey, I know: let me recite positive affirmations to
myself on the way.</em></p>
</blockquote>
<p>You think?</p>
<p>Or is he more likely to be wondering, <em>Do I want the soup or just a
chicken sandwich?</em></p>
<p>The truth is, people with good self-esteem are not constantly
evaluating themselves. It's the ones without it who do this. Our
culture teaches us that having self-esteem is an active process of
building ourselves up. It isn't. Cats, three-year-olds, and adults
with self-esteem aren't doing much of anything&#8212;they're just focused on
the task at hand.</p>
<p>The active process is to have <em>low</em> self-esteem, to be constantly
tearing ourselves down. When we wake up in the morning, before our
mind starts going, our self-esteem is fine. We only begin feeling
inadequate when we start rehearsing the negative story that we tell
ourselves. By focusing on self-esteem, we cleverly divert attention
from the real issue.</p>
<p>Self-esteem, in other words, <em>does not exist.</em> Self-loathing, however,
is very real.</p>
<p>In the classic French film <em>Jean de Florette,</em> townspeople in Provence
conspire to trick a man out of the property he has inherited by
capping the farm's only source of water, thus starving his crops and
ensuring his downfall. Jean strives mightily to haul water to the
farm, unaware that it already has an inexhaustible supply just
underground.</p>
<p>Similarly, believers in self-esteem strive to import a sense of
self-worth, neglecting the fact that no such efforts are really
necessary: all they need to do is remove the plug that prevents
self-worth from flowing. That plug is the relentless self-criticism in
which they engage.</p>
<p>Your mission, then, is to affirm your faith in the concept of
self-esteem. Strive to build it up within yourself. Attend workshop
after workshop, recite affirmations, invite friends and therapists to
exalt your achievements. In doing so, you will reinforce both the
hidden conviction that there is much to make up for and the
corresponding belief in your inherent faultiness.</p>
<p>Sisyphus found an ideal path to misery: endlessly rolling a stone up a
hill, only to have it repeatedly escape his grasp and tumble to the
bottom. Trying to create self-esteem is like trying to construct a
ladder out of water. Futility leads to unhappiness, and seeing
yourself as lacking something that does not actually exist is a
perfect example.</p>
<hr>
<p><img alt="How to be Miserable (cover)" src="miserable_cover.jpg"></p>    
    ]]></description>
<link>http://planspace.org/20191005-how_to_be_miserable/</link>
<guid>http://planspace.org/20191005-how_to_be_miserable/</guid>
<pubDate>Sat, 05 Oct 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>The AWK Programming Language</title>
<description><![CDATA[

<p>The 1988 <a href="https://en.wikipedia.org/wiki/The_AWK_Programming_Language">book</a> on <a href="https://en.wikipedia.org/wiki/AWK"><code>awk</code></a> by Aho, Weinberger, and Kernighan is as good as everyone says, and I will highly recommend it for programmers and data science folks.</p>
<p>Specialized tools <a href="/2013/05/21/command-line-data-manipulation/">like <code>cut</code> and <code>bc</code></a> handle many simple tasks, and general languages like Python can do pretty complicated things. For a long time I avoided properly learning <code>awk</code>, perhaps because I didn't understand that it fills such a useful space between those two extremes, and that the learning curve is really reasonable.</p>
<p>Awk is good at processing lines of delimited text quickly and easily, with defaults that are often convenient. For example, here's adding a <a href="https://en.wikipedia.org/wiki/Body_mass_index">BMI</a> column to <a href="biostats.csv">this file</a> I <a href="https://people.sc.fsu.edu/~jburkardt/data/csv/csv.html">found</a>:</p>
<pre><code class="language-bash">cat biostats.csv | awk -F, 'NR == 1 {print $0, ",BMI"} \
                            NR &gt; 1 {print $0, "," ($5/2.205) / ($4/39.37)^2}'</code></pre>

<p>That would probably take more effort with most other tools.</p>
<p>Unfortunately <code>awk</code> doesn't make it very easy to deal with some complications that can show up in CSV (quoting, newlines inside fields, etc.). A Python project called <a href="https://github.com/alecthomas/pawk"><code>pawk</code></a> looks like it could be the answer, if you don't mind installing it and using Python syntax.</p>
<p>Here's the conclusion from the book:</p>
<blockquote>
<p>Awk is not a solution to every programming problem, but it's an
indispensible part of a programmer's toolbox, especially on Unix,
where easy connection of tools is a way of life. Although the larger
examples in the book might give a different impression, most awk
programs are short and simple and do tasks the language was
originally meant for: counting things, converting data from one form
to another, adding up numbers, extracting information for reports.</p>
<p>For tasks like these, where program development time is more
important than run time, awk is hard to beat. The implicit input
loop and the pattern-action paradigm simplify and often entirely
eliminate control flow. Field splitting parses the most common forms
of input, while numbers and strings and the coercions between them
handle the most common data types. Associative arrays provide both
conventional array storage and the much richer possibilities of
arbitrary subscripts. Regular expressions are a uniform notation for
describing patterns of text. Default initialization and the absence
of declarations shorten programs.</p>
<p>What we did not anticipate were the less conventional applications.
For example, the transition from "not programming" to "programming"
is quite gradual: the absence of the syntactic baggage of
conventional languages like C or Pascal makes awk easy enough to
learn that it has been the first language for a surprising number of
people.</p>
<p>The features added in 1985, especially the ability to define
functions, have led to a variety of unexpected applications, like
small database systems and compilers for little languages. In many
cases, awk is used for a prototype, an experiment to demonstrate
feasibility and to play with features and user interfaces, although
sometimes the awk program remains the production version. Awk has
even been used for software engineering courses, because it's
possible to experiment with designs much more readily than with
larger languages.</p>
<p>Of course, one must be wary of going too far &#8212; any tool can be
pushed beyond its limits &#8212; but many people have found awk to be
valuable for a wide range of problems. We hope we have suggested
ways in which awk might be useful to you as well.</p>
</blockquote>
<p>They take <code>awk</code> pretty far in the book, and it's delightful to see, even if you only end up using <code>awk</code> for simpler things like my example above.</p>
<p><img alt="AWK book cover" src="awk_cover.jpg"></p>    
    ]]></description>
<link>http://planspace.org/20190901-awk_programming_language/</link>
<guid>http://planspace.org/20190901-awk_programming_language/</guid>
<pubDate>Sun, 01 Sep 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>The $100 Startup</title>
<description><![CDATA[

<p>Maybe I should stop reading books based just on what's in local Little
Free Libraries. Regardless, <em>The $100 Startup</em> was a fine vacation
read: light on content but interesting enough to inspire some thought.</p>
<p>The core of Chris Guillebeau's book (and brand overall, it seems) is
wish fulfillment along the lines of
<a href="/2011/03/14/listened-to-four-hour-work-week/">The Four-Hour Work Week</a>
(referenced indirectly on page 123) or
<a href="/20180122-why_the_rich_are_getting_richer/">Why the Rich are Getting Richer</a>.
He's a self-help guy: his success is in capturing imaginations.</p>
<p>The encouragement is nice, and generally less irresponsible than that
of some of his peers. Guillebeau currently seems to be recommending
"side hustles" rather than quitting your job outright. The book is
still a bit cavalier in places, as on page 170 where it nearly
endorses auto loan fraud as a startup funding method.</p>
<p>Health insurance is on pages 236-237. There "self-insured" means
"uninsured" and one individual says "My health-care plan involves
prayer, vitamins, and avoiding sharp objects." Aside from the national
crisis of the US healthcare system, this section speaks to the reality
that many entrepreneurs just aren't doing terribly well.</p>
<p>There's an acknowledgement on page 247: "The fact is that the majority
of people don't own their own business." There are good economic
reasons for this, based on efficiency and risk reduction. It's fun to
think about, along with whether it needs to be true for you.</p>
<p><img alt="The $100 Startup cover" src="startup.jpg"></p>    
    ]]></description>
<link>http://planspace.org/20190824-100_startup/</link>
<guid>http://planspace.org/20190824-100_startup/</guid>
<pubDate>Sat, 24 Aug 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>SQL Performance Explained, by Winand</title>
<description><![CDATA[

<p>This is the printed version of "<a href="https://use-the-index-luke.com/">Use the index, Luke</a>." It avoids the Jedi goofiness&#8212;and the author's <a href="https://winand.at/static/markus_winand.Y-sfxgk9.jpg">unsettling gaze</a>. It's pretty good, especially for a self-published book, and it delivers on the promise of explaining, very accessibly, how SQL engines run.</p>
<p>The mental model offered goes beyond just "index means \(O(log(n))\)," though there are the obligatory graphs showing linear vs. log growth. Winand describes tree traversal of indexes, but then also (depending on data and query) linked-list traversal, and how this relates to accessing data that isn't in the index, and connected trade-offs.</p>
<p>The material starts rudimentary, but reaches details such as this, on page 140:</p>
<blockquote>
<p>"The Oracle database cannot read an index backwards in order to execute a pipelined <code>group by</code> that is followed by an <code>order by</code>."</p>
</blockquote>
<p>One of the most interesting things for me turned out to be the frequent comparisons and notes specific to SQL implementations. Very often the notes were explaining that MySQL didn't offer a particular feature, or that a feature was only available in Postgres. MS SQL Server and Oracle seem to be somewhere in the middle.</p>
<p>The level of detail was also sufficient to make clear that declarative languages like SQL are not the panacea that they are sometimes made out to be. I hadn't realized, for example, that SQL engines make execution choices based on statistics they keep about the data they store, and that those statistics can be incorrect, leading to bad choices.</p>
<p>Winand is also critical of <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a>s that can lead to bad SQL. Though I didn't find these examples particularly compelling, I do think it's a related case of trading control for convenience.</p>
<p>Also, the book comes with a bookmark, which is a laminated miniature of the cover.</p>
<p><img alt="SQL Performance Explained cover" src="sql_cover.jpg"></p>
<!-- mathjax for formulas -->

    ]]></description>
<link>http://planspace.org/20190727-sql_performance_explained_by_winand/</link>
<guid>http://planspace.org/20190727-sql_performance_explained_by_winand/</guid>
<pubDate>Sat, 27 Jul 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>Expert Python Programming by Jaworski and ZiadÃ©</title>
<description><![CDATA[

<p>The authors use "half a loaf is better than none" on page 545 in reference to <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor"><code>run_in_executor</code></a>, and that saying is also applicable to their book. <a href="https://www.packtpub.com/application-development/expert-python-programming-third-edition">Expert Python Programming</a> is not a good book, but it's also not entirely without value.</p>
<p>The editing could be better. Either no native English speakers were involved, or they didn't have enough time to work with the Polish and French authors' prose. A next section promised on page 391 never appears. On page 546 there are two different next chapters. There's even a code block on page 576 that is printed with all the newlines stripped out.</p>
<p>Beyond simple issues, explanation is sometimes poor or missing. The <a href="https://en.wikipedia.org/wiki/Token_bucket">token bucket</a> explanation is particularly unclear. They say that Python string concatenation is quadratic, but they don't explain <a href="https://stackoverflow.com/questions/44487537/why-does-naive-string-concatenation-become-quadratic-above-a-certain-length/44487738#44487738">why</a>. On page 496 they suggest that non-deterministic caching has been solved numerous times, so the reader can just go look on PyPI.</p>
<p>The publication date of this third edition is April 2019, and yet there's no mention of <a href="/20190629-using_pipenv/">Pipenv</a>. They <a href="https://github.com/pytest-dev/pytest/issues/1629#issue-161422224">still</a> say py.test rather than pytest. They mention nose but not nose2. Chunks of the book refer to Python 3.5, while the cover promises 3.7.</p>
<p>The perspective of the authors is unfamiliar to me, as when they say on page 187 that "Using binary bit-wise operations to combine options is common in Python."</p>
<p>I'd like to be able to trust the completeness of a book like this. If it doesn't know about Pipenv, what else is it missing that should really be included?</p>
<p>But it isn't all bad. I don't recall seeing the Python 3.7 <code>asyncio.run()</code>, but the larger-scale explanations of <a href="https://docs.python.org/3/library/asyncio.html"><code>asyncio</code></a> weren't awful. If I'm understanding properly, the interesting thing about <code>await</code> is that it <em>doesn't</em> wait, in the sense of blocking.</p>
<p>So I'm not upset that I read the book. I suspect the authors are technically competent people who did the best they could with limited resources from <a href="https://www.packtpub.com/">Packt</a>. The book contains their take on things, and it broadened what I was aware of.</p>
<p><img alt="cover" src="cover.png"></p>    
    ]]></description>
<link>http://planspace.org/20190707-expert_python_programming_by_jaworski_and_ziade/</link>
<guid>http://planspace.org/20190707-expert_python_programming_by_jaworski_and_ziade/</guid>
<pubDate>Sun, 07 Jul 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>Using Pipenv</title>
<description><![CDATA[

<p>If you use Python, you should use <a href="https://docs.pipenv.org/en/latest/">Pipenv</a> for
environment/requirement management.</p>
<hr>
<h3>Installing</h3>
<p>Do you have Pipenv installed? (Try <code>which pipenv</code>.) If you don't have
it, install it:</p>
<pre><code class="language-bash">$ pip install --user pipenv</code></pre>

<p>Now you can read <code>pipenv --help</code>, but I'll continue to highlight
common tasks.</p>
<hr>
<h3>Existing project</h3>
<p>Is there an existing <code>Pipfile</code>? To get things installed, run this in
the project directory:</p>
<pre><code class="language-bash">$ pipenv sync</code></pre>

<hr>
<h3>New project</h3>
<p>Starting a new project? There's no explicit "new" command, but you can
do this:</p>
<pre><code class="language-bash">$ pipenv --python 3.7</code></pre>

<p>You can also skip that and just start installing things.</p>
<p>Keep <code>Pipfile</code> and <code>Pipfile.lock</code> in version control.</p>
<hr>
<h3>Installing your requirements</h3>
<p>Just use <code>pipenv</code> instead of <code>pip</code> (or other alternatives).</p>
<pre><code class="language-bash">$ pipenv install some_cool_python_package</code></pre>

<p><code>Pipfile</code> and <code>Pipfile.lock</code> will be kept up to date automatically.</p>
<hr>
<h3>Development requirements</h3>
<p>Pipenv keeps dev packages (like <a href="https://www.pylint.org/">Pylint</a>, for
example) separate. Just use the <code>--dev</code> flag:</p>
<pre><code class="language-bash">$ pipenv install --dev some_cool_python_package
$ pipenv sync --dev  # install base AND dev packages</code></pre>

<hr>
<h3>Running things</h3>
<p>Just use <code>pipenv run</code> a lot.</p>
<pre><code class="language-bash">pipenv run python whatever.py --etc</code></pre>

<hr>
<h3>That's it!</h3>
<p>Pipenv does a lot for you, while requiring very little from you.</p>
<p>I do have more thoughts though...</p>
<hr>
<h3>Why is it good?</h3>
<p>Without Pipenv, maybe you track big-picture requirements in
<code>setup.py</code>'s <code>install_requires</code>, and/or elsewhere. Maybe you have a
<code>requirements.txt</code> so you have known-good exact versions of
everything. Maybe another such file for dev requirements. And you
probably have to remember to take separate actions to keep these all
up to date and in sync. The pain! The mistakes!</p>
<hr>
<h3>Working directory</h3>
<p>I don't generally love magic based on my current working directory,
but Pipenv has won me over. I appreciate that it's explicit, at least.
No environment variables get automatically changed when you change
directories, for example. You have to run some <code>pipenv</code> command to do
anything with the environment corresponding to where you are on disk.</p>
<hr>
<h3>History</h3>
<p>I used to <a href="/20150120-use_pew_not_virtualenvwrapper_for_python_virtualenvs/">advocate for Pew</a>, so I was interested to see that Pipenv
is a kind of descendant of Pew. Pipenv's implementation used to rely
on Pew, even.</p>
<p>You can get a shell in your project environment with <code>pipenv shell</code>
and it seems to work more like <code>pew workon</code> than <code>source activate</code>.</p>
<p>Perhaps the major workflow difference is that now <code>pipenv run</code> (like
<code>pew in</code>) is commonly used, to the exclusion of changing your shell. I
think this is a good thing in that it's more explicit and removes the
risk of forgetting what the current state of your shell is.</p>
<hr>
<h3>Where's my venv, though?</h3>
<p>Unless you mess with defaults, virtual environments are stored,
consistent with <a href="https://www.python.org/dev/peps/pep-0370/">PEP 370</a>,
in <code>~/.local/share/virtualenvs/</code>. They're associated with a Pipfile
via a hash of its path.</p>
<p>Here's a simplified version of <a href="https://github.com/pypa/pipenv/blob/08b35715c0b34461df184d907654250f60b5a0d7/pipenv/project.py#L376">the hashing</a>:</p>
<pre><code class="language-python">import hashlib, base64

def short_hash(path_to_pipfile):
    hash = hashlib.sha256(path_to_pipfile.encode()).digest()[:6]
    return base64.urlsafe_b64encode(hash)</code></pre>

<p>So the venv for <code>/home/me/project/Pipfile</code> will be called
<code>project-fPIxLfK7</code>. You can always check your project with <code>pipenv
--venv</code>.</p>
<p>This does mean that if you move or otherwise rename your project
directory, Pipenv can lose track of your virtualenv &#8212; but it's super
easy to just run <code>pipenv sync</code> and you're ready to go again.</p>    
    ]]></description>
<link>http://planspace.org/20190629-using_pipenv/</link>
<guid>http://planspace.org/20190629-using_pipenv/</guid>
<pubDate>Sat, 29 Jun 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>Circe by Madeline Miller</title>
<description><![CDATA[

<p>I didn't know anything about
<a href="https://en.wikipedia.org/wiki/Circe">the Circe of mythology</a>, so to
me Miller's book was mostly fan fiction for classics majors, sort of
like Twilight but backward. Then I learned there's a whole history of
misogynist vs. feminist versions of Circe, which gives the book a bit
more gravitas. I think it's a fine book regardless of how deeply into
the history you go.</p>
<p>I frequently liked the writing, which was obviously wrought but rarely
overwrought. Here are a couple lines I pulled out, in retrospect more
for their sentiment than their language per se:</p>
<blockquote>
<p>"Beneath the smooth, familiar face of things is another that waits
to tear the world in two." (p. 16)</p>
<p>"<em>Bold action and bold manner are not the same.</em>" (p. 21, italics in
original)</p>
</blockquote>
<p>Miller's Circe is on the feminist side. Here's one small example,
drawing attention to a false dichotomy that probably has a name:</p>
<blockquote>
<p>"Would I be skimmed milk for crying, or a harpy with a heart of
stone? There was nothing in between." (p. 98)</p>
</blockquote>
<p>This book loves foreshadowing, from the very first line: "When I was
born, the name for what I was did not exist." (She's a witch.)
Foreshadowing is everywhere. In particular, I thought I noticed a
couple instances before the reveal that Circe is pregnant.</p>
<p>This first selection is arguably just sexual, but "belly" made me
start to wonder whether Circe was starting to think about a child:</p>
<blockquote>
<p>"My smooth belly glowed beneath my hand, the color of honey shining
in the sun. I drew him down to me." (p. 215)</p>
</blockquote>
<p>I think this one is clearer. It follows a discussion of another mother
(with "a thousand wiles") and her child:</p>
<blockquote>
<p>"I cupped my own hands in the dark. I did not have a thousand wiles,
and I was no fixed star, yet for the first time I felt something in
that space. A hope, a living breath, that might yet grow between."
(p. 226)</p>
</blockquote>
<p>I'm not sure if this one counts as foreshadowing because it's so
explicit:</p>
<blockquote>
<p>"And last of all, still in its cedar box: silphium ground with
wormwood, the draught I had taken each moon since the first time I
lay with Hermes. Each moon except the last." (p. 234)</p>
</blockquote>
<p><a href="https://en.wikipedia.org/wiki/Silphium">Silphium</a> is an extinct
natural contraceptive.</p>
<p>In addition to all the foreshadowing, there's explicit prophecy from
the gods.</p>
<blockquote>
<p>"It was [the Fates'] favorite bitter joke: those who fight against
prophecy only draw it more tightly around their throats." (p. 291)</p>
</blockquote>
<p>As with <a href="https://en.wikipedia.org/wiki/Oedipus">Oedipus</a>, the
realization of prophecy is independent of whether you know it in
advance. I hadn't thought about this before, but it's not so different
from <a href="/20190613-exhalation_by_ted_chiang/">Ted Chiang</a>'s
single-timeline time travel. Maybe the ancient Greek's didn't like
paradoxes?</p>
<p>As you read, there are also references to earlier parts of the book,
which ask you to remember it pretty well. On page 358, it says "<em>Then,
child, make another,</em>" and you have to remember that the giant fish
god said that back on page 282, and that in context it meant "make
another world" (as in, take bold steps to change your situation).</p>
<p>Madeline Miller has made another world in Circe: a world humane to
both the goddess and the reader.</p>
<p><img alt="Circe cover" src="circe.jpg"></p>    
    ]]></description>
<link>http://planspace.org/20190626-circe_by_madeline_miller/</link>
<guid>http://planspace.org/20190626-circe_by_madeline_miller/</guid>
<pubDate>Wed, 26 Jun 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>Aladdin translated by Yasmine Seale</title>
<description><![CDATA[

<p>The history of the story of Aladdin, given in some detail in the
introduction, is interesting. In the story itself, I was hoping for
something really different from Disney's Aladdin, and I was somewhat
disappointed there. There are differences, but they're not so huge.</p>
<p>The front flap of the cover promises "a newfound appreciation for the
ingenuity of the heroine, Princess Badr al-Budur, who outwits an evil
magician to ultimately save Aladdin's life." I was looking forward to
that, but Aladdin makes the plan to have the princess poison the
magician. The princess does successfully poison the magician's drink
(exactly as Aladdin directed her) but I was hoping for a little more
agency for the princess.</p>
<p>The translator and editor point out that the story has a feel
consistent with being told by someone telling stories for their life,
and I think that's true: pushing the action foward, and-then'ing the
next chapter and the next, with no time to go back and edit. It's
probably a good thing that most stories aren't produced that way.</p>
<p><img alt="Aladdin cover" src="aladdin.jpg"></p>
<hr>
<p>Thanks <a href="https://twitter.com/rememberlenny">Lenny</a> for the
recommendation!</p>    
    ]]></description>
<link>http://planspace.org/20190617-aladdin_translated_by_yasmine_seale/</link>
<guid>http://planspace.org/20190617-aladdin_translated_by_yasmine_seale/</guid>
<pubDate>Mon, 17 Jun 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>Exhalation by Ted Chiang</title>
<description><![CDATA[

<p><a href="https://en.wikipedia.org/wiki/Ted_Chiang">Ted Chiang</a> wrote <a href="https://en.wikipedia.org/wiki/Story_of_Your_Life">Story of Your Life</a>, which I liked a lot and became the movie <a href="https://en.wikipedia.org/wiki/Arrival_(film)">Arrival</a>. <a href="https://www.penguinrandomhouse.com/books/538034/exhalation-by-ted-chiang/9781101947883/">Exhalation</a> has two more single-timeline <a href="https://samharris.org/books/free-will/">deterministic</a> time-travel stories at the beginning, but then it opens up a bit. Chiang's <a href="https://en.wikipedia.org/wiki/Stories_of_Your_Life_and_Others">first collection</a> might be better, but read this one too.</p>
<p>Spoilers as I briefly describe Exhalation's stories:</p>
<ul>
<li>The Merchant and the Alchemist's Gate<ul>
<li>Single-timeline time-travel with portals that can take you
   whenever they existed.</li>
</ul>
</li>
<li>Exhalation<ul>
<li>Entropy kills (but also some neat stuff on trying to understand
   brains).</li>
</ul>
</li>
<li>What's Expected of Us<ul>
<li>Oh man there's no free will.</li>
</ul>
</li>
<li>The Lifecycle of Software Objects<ul>
<li>Humanlike AI requires humanlike entities. I tend to agree with
   his take here.</li>
</ul>
</li>
<li>Dacey's Patent Automatic Nanny<ul>
<li>Some kid develops an attachment to machines rather than people.</li>
</ul>
</li>
<li>The Truth of Fact, the Truth of Feeling<ul>
<li>Let's understand Trump as pre-literate / maybe perfect (video)
   memory is cool?</li>
</ul>
</li>
<li>The Great Silence<ul>
<li>Maybe parrots are really smart?</li>
</ul>
</li>
<li>Omphalos<ul>
<li>A world with physical proof of creationism finds out it was
   God's practice planet.</li>
</ul>
</li>
<li>Anxiety Is the Dizziness of Freedom<ul>
<li>Devices for communicating between two parallel universes (one
   pair per device).</li>
</ul>
</li>
</ul>
<p>I never wrote about <a href="https://en.wikipedia.org/wiki/Stories_of_Your_Life_and_Others">Stories of Your Life and Others</a>, so I'll describe those too:</p>
<ul>
<li>Tower of Babylon<ul>
<li>It gets so high that it breaks through the firmament.</li>
</ul>
</li>
<li>Understand<ul>
<li>A guy gets crazy smart and fights with another smart guy.</li>
</ul>
</li>
<li>Division by Zero<ul>
<li>Whoa what if arithmetic is
   <a href="https://en.wikipedia.org/wiki/Consistency">inconsistent</a>.</li>
</ul>
</li>
<li>Story of Your Life<ul>
<li>Cross-time awareness (single timeline) with aliens and writing.</li>
</ul>
</li>
<li>Seventy-Two Letters<ul>
<li>What if people really did grow from
   <a href="https://en.wikipedia.org/wiki/Homunculus">homunculi</a> (also
   other weird stuff).</li>
</ul>
</li>
<li>The Evolution of Human Science<ul>
<li>People make more advanced humans and we can't understand them
   any more. (Possible connection to AI explainability?)</li>
</ul>
</li>
<li>Hell is the Absence of God<ul>
<li>A world where angels are real and messy, heaven and hell are
   real, etc.</li>
</ul>
</li>
<li>Liking What You See: A Documentary<ul>
<li>Turning off visual perception of human beauty.</li>
</ul>
</li>
</ul>
<p><img alt="Exhalation" src="exhalation.jpg"></p>
<hr>
<p>Thanks <a href="https://twitter.com/rememberlenny">Lenny</a> for letting me know
that Exhalation was available!</p>    
    ]]></description>
<link>http://planspace.org/20190613-exhalation_by_ted_chiang/</link>
<guid>http://planspace.org/20190613-exhalation_by_ted_chiang/</guid>
<pubDate>Thu, 13 Jun 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>Designing Data-Intensive Applications</title>
<description><![CDATA[

<p>This book was <a href="https://fullstackdeeplearning.com/march2019">recommended</a> by <a href="https://sergeykarayev.com/">Sergey Karayev</a> and I agree: this is a very good book.</p>
<p>The <a href="https://martin.kleppmann.com/">author</a> is expert in both content and communication, erudite and humane. Everyone who works with data would do well to read this book. And it has <a href="https://martin.kleppmann.com/2017/03/15/map-distributed-data-systems.html">maps</a>!</p>
<p>What is it about? Lots of things... Check out the <a href="https://www.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/#toc-start">table of contents</a>. It's so good.</p>
<p><img alt="cover" src="boar_cover.png"></p>    
    ]]></description>
<link>http://planspace.org/20190606-designing_data-intensive_applications/</link>
<guid>http://planspace.org/20190606-designing_data-intensive_applications/</guid>
<pubDate>Thu, 06 Jun 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>The Book Thing of Baltimore</title>
<description><![CDATA[

<p>I really like <a href="https://bookthing.org/">The Book Thing of Baltimore</a>. It's like a <a href="https://littlefreelibrary.org/">Little Free Library</a> but <a href="https://en.wikipedia.org/wiki/The_Book_Thing">with 200,000 books</a>. It's as great <a href="https://www.atlasobscura.com/places/the-book-thing-baltimore-maryland">as everyone says</a> and I think there should be more of them.</p>
<p><img alt="inside the book thing" src="book_thing.jpg"></p>
<p>Thoughts at the thing:</p>
<ul>
<li>Books can seem so major, so heavy, so important... but most of them
   are ephemeral.</li>
<li>Nearly all book-reading is for entertainment.</li>
<li>Many things that we own, we don't really need to own.</li>
<li>Operations don't need to be complicated: The book thing doesn't
   track each book, doesn't cycle them or worry about staleness; you
   don't have to sign up to volunteer, you just show up. Their
   "processes" are dead simple, and it works.</li>
</ul>    
    ]]></description>
<link>http://planspace.org/20190602-book_thing_of_baltimore/</link>
<guid>http://planspace.org/20190602-book_thing_of_baltimore/</guid>
<pubDate>Sun, 02 Jun 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>Null impact of letters to very unlikely voters</title>
<description><![CDATA[

<p>Before the November 2018 election, I sent 2,181 personalized letters to very unlikely voters registered in New York's state senate district 5, encouraging them to vote. I sent 1,180 "birthday letters" in the months before the election, and 1,001 more conventional letters shortly before the election. Unfortunately, I didn't meaningfully increase voting rates in either group compared to control. This null result supports the conventional wisdom that extremely low-propensity voters are not optimal targets for get-out-the-vote efforts.</p>
<pre><code>| Group           | Total | Voted | % Voted |
|-----------------|-------|-------|---------|
| Control         | 3,135 | 349   | 11.13%  |
| Birthday letter | 1,180 | 140   | 11.86%  |
| Timely letter   | 1,001 | 111   | 11.09%  |</code></pre>

<p><strong>Statistical analysis</strong>: These results are not distinguishable. The best p-value I get is 0.25. The treatments are very similar, but one "effect" is positive and the other negative.</p>
<p><strong>Group selection</strong>: Using a 2018-07-20 voter file for NY SD5, I selected active registered Democrats who had voted at least once but not voted in the last five years. Back-testing showed equivalent groups had historically voted at low rates in midterm elections: 9%, 8%, and 4% in 2006, 2010, and 2014, respectively.</p>
<p><strong>Rationale</strong>: I hoped that by communicating with more people who wouldn't otherwise vote, more could be swayed. I was aware of the common practice of targeting people judged to be around 50% likely to vote, but I hoped to find a novel result, and thought that especially in the particularly high-saliency 2018 midterm, my approach could work.</p>
<p><strong>Birthday letter</strong>: To encourage engagement, I thought it would be fun to send birthday letters. This experiment group was the subset of the larger group with birthdays from August 19 to November 6. The letters had brief birthday greetings before the pro-voting message, and a "happy birthday" sticker on the outside of the hand-addressed envelopes. Letters were mailed a week before each birthday.</p>
<p><strong>Timely letter</strong>: These letters were nearly identical to birthday letters, but with generic greetings and no stickers. They were mailed a week before the election. This group was a random selection from the larger group not selected for birthday letters. (The remainder became the control group, not receiving any letter.) Research suggests timely messaging should be <em>more</em> effective, making the outcome of this treatment even more discouraging.</p>
<p><strong>Deliverability</strong>: I got 8% of letters bounced back to my address, which I hope is high for this kind of campaign. Of bounces, 6% voted. (I wouldn't read much into this.)</p>
<p><strong>Direct response</strong>: Letters included my personal mailing and email addresses. I had hoped to make a person-to-person connection with voters. I heard back from three people:</p>
<ul>
<li>One person was an active voter who had moved, but family at his
   previous address got the letter to him. He emailed and was very
   supportive.</li>
<li>One person found me on Twitter and was briefly curious about the
   project.</li>
<li>The mother of a letter's intended recipient emailed to say she was
   pro-voting but upset that I had the address and birthday of her
   daughter.</li>
</ul>
<p><strong>Results data</strong>: I used a 2019-02-28 voter file for NY SD5. Voters were re-identified by New York State Board of Elections voter ID.</p>
<p><strong>Conclusions</strong>: I wouldn't do this again. It was a learning experience, and it made me feel like I was doing something at the time. The overall change in turnout from 2014 to 2018 was dramatically greater than any effect ever achieved by a postal get-out-the-vote effort, which makes me think other influences are important.</p>    
    ]]></description>
<link>http://planspace.org/20190531-null_impact_of_letters_to_very_unlikely_voters/</link>
<guid>http://planspace.org/20190531-null_impact_of_letters_to_very_unlikely_voters/</guid>
<pubDate>Fri, 31 May 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>Understanding MyinTuition</title>
<description><![CDATA[

<p><a href="https://myintuition.org/">MyinTuition</a> is a simple online college
cost estimator for about 50 schools. I was curious about how it
worked, so I figured it out. I suspect they don't want me to say, and
I like them, so I won't. But here are some of my opinions and
experiences.</p>
<p>The rhetoric around MyinTuition is all about transparency, as in the
creator's 2014 paper about it, <a href="https://www.brookings.edu/wp-content/uploads/2016/06/12_transparency_in_college_costs_levine.pdf)">Transparency in College Costs</a>.
They want to be transparent about this message:
<a href="https://www.nytimes.com/interactive/2018/06/05/opinion/columnists/what-college-really-costs.html">Top Colleges Are Cheaper Than You Think (Unless You&#8217;re Rich)</a>.</p>
<p>College affordability is important. An expanded idea of transparency
might further include how the MyinTuition calculations are done, and
how the different schools vary. That's what I was curious about.</p>
<p>I originally thought I'd try to use machine learning to understand how
MyinTuition works, which would mean first collecting training data.
I'm not sure this was ever a good idea. For one thing, it doesn't seem
practical if data collection is severely rate-limited.</p>
<p>I explored on and off for a couple months. It was fun! It wouldn't be
as much fun to do now, what with the <a href="https://www.google.com/recaptcha/">CAPTCHA</a>s they've put
in. And unfortunately it may no longer be possible to access
MyinTuition at all using the IP addresses I was on at the time.</p>
<p>Figuring out the MyinTuition calculations and parameters for different
schools was interesting. I'll just recommend that you try a bunch of
schools and see what you get. You can find the calculators for all
participating schools <a href="https://myintuition.org/quick-college-cost-estimator/">on their site</a>.</p>
<p>Never stop learning, kids!</p>
<!-- https://bitbucket.org/ajschumacher/college_cost/ -->    
    ]]></description>
<link>http://planspace.org/20190529-understanding_myintuition/</link>
<guid>http://planspace.org/20190529-understanding_myintuition/</guid>
<pubDate>Wed, 29 May 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>The One Thing</title>
<description><![CDATA[

<p>This book is not all bad. A copy found its way from an airport
bookstore to a <a href="https://littlefreelibrary.org/">little free library</a>
to me, and I read it. Key points:</p>
<ul>
<li>Do the most important thing(s).</li>
<li>Make time to do things, blocking four-hour AM calendar "meetings"
   if need be.</li>
</ul>
<p>There's some other stuff in there about thinking big, identifying the proximal task, staying healthy, trying to not be a workaholic, etc. The book repeats pop science hits like <a href="https://en.wikipedia.org/wiki/Stanford_marshmallow_experiment">the marshmallow experiment</a> unquestioningly and without more recent <a href="https://www.theatlantic.com/family/archive/2018/06/marshmallow-test/561779/">updates</a>. There are ample cute turns of phrase that seem designed to play well in motivational speaking. It's not a great book, but it's quick to read, and it does sort of pump you up.</p>
<p>I think the core idea is not so bad. Two important aspects:</p>
<ul>
<li><strong>Just <em>completing</em> anything.</strong> There are so many distractions and
   ways to waste time, it's possible to "work" a lot and not actually
   get things done. It's helpful to identify a thing to do and then
   focus on completing it. The book mentions the inefficiency of
   multitasking, which rings true to me.</li>
<li><strong>Doing the <em>right</em> thing.</strong> There are many paths to not
   accomplishing anything. You can work on a problem for a long time,
   even get a lot of things done, without actually making real
   progress. You might end up with everything to show for your work
   except what you actually needed.</li>
</ul>
<p><img alt="The One Thing (cover)" src="the_one_thing_cover.jpg"></p>    
    ]]></description>
<link>http://planspace.org/20190403-the_one_thing/</link>
<guid>http://planspace.org/20190403-the_one_thing/</guid>
<pubDate>Wed, 03 Apr 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>Swimming with Sharks, by Joris Luyendijk</title>
<description><![CDATA[

<p>"Inside the world of the bankers,"</p>
<blockquote>
<p>"You see a cluster of islands in the fog, staffed by mercenaries."
(page 145)</p>
</blockquote>
<p><a href="https://twitter.com/JORISLUIJENDIJK">Luyendijk</a> wrote
<a href="https://www.theguardian.com/commentisfree/joris-luyendijk-banking-blog">a 2011-2013 banking blog</a>
for the Guardian based on interviews with bankers in London. It became
this 2015 book. It's quite late to the "What happened in 2008?"
party, and even makes the observation that</p>
<blockquote>
<p>"the sector has become immune to exposure." (page 252)</p>
</blockquote>
<p>It does seem like some things these days are so bad they can hardly be
made to look worse, and yet far from being stopped, some people really
like them.</p>
<p>So Luyendijk writes about how things in finance are complicated, and
bad, but it's hard to single out any bad guys by name. His Dutch
perspective is interesting: he identifies lack of job security as a
major cause of problems in finance, for example.</p>
<p>On page 254 he has one paragraph of recommendations for law to change
the system:</p>
<ol>
<li>Break up banks so nothing is too big or too complex to fail</li>
<li>Don't let units of the same company have conflicts of interest
    with one another</li>
<li>Don't allow the building/selling/owning of overly complex
    financial products</li>
<li>Only allow bonuses that have symmetric risk</li>
</ol>
<p>No problem, right?</p>
<p>The observation and recommendation that resonated the most for me was
reconnecting reward to risk. With big public companies, a trader has
essentially only upside: good performance means a big bonus, but bad
performance means at worst finding another high-paying job at a
different company.</p>
<blockquote>
<p>"nobody should have more reason to lie awake at night worrying over
the risks to the bank's capital or reputation than the bankers
taking those risks." (page 254)</p>
</blockquote>
<p>I can get behind the sentiment, at least.</p>
<p><img alt="Swimming with Sharks cover" src="sharks_cover.jpg"></p>    
    ]]></description>
<link>http://planspace.org/20190204-swimming_with_sharks/</link>
<guid>http://planspace.org/20190204-swimming_with_sharks/</guid>
<pubDate>Mon, 04 Feb 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>The Unreal and The Real, Volume Two</title>
<description><![CDATA[

<p>I bought
<a href="https://smile.amazon.com/Unreal-Real-Selected-Stories-Outer/dp/1618730355/">this</a>
collection of
<a href="https://en.wikipedia.org/wiki/Ursula_K._Le_Guin">Le Guin</a>'s short
stories and then she died before I read it. Before that, I once bought
a Kurt Vonnegut print and he died before it was delivered. I'm cursed!</p>
<p>I got the book because it has The Ones Who Walk Away From Omelas,
which I heard about in
<a href="https://www.amazon.com/How-Think-Survival-Guide-World/dp/0451499603">How to Think</a>
(which by the way is better for reacting to than learning from, if
there's a difference). Le Guin notes that Omelas "has had a long and
happy career of being used by teachers to upset students and make them
argue fiercely about morality." I missed that class, so it was nice to
catch up. File with:
<a href="https://en.wikipedia.org/wiki/Trolley_problem">trolley problems</a>?</p>
<p>To guess how Le Guin chose the stories for this volume, I'd say she
was trying to span the largest possible space of worlds. There are
lots of different universes. For example:</p>
<p>What if:</p>
<ul>
<li>the ratio of boy babies to girl babies was 1:16 instead of close to
   1:1?</li>
<li>one in a thousand people grew working, flying wings around age 20?</li>
<li>wolves were occasionally werepeople?</li>
<li>a peasant broke into Sleeping Beauty's castle and lived there while
   she slept?</li>
<li>an all-woman party of explorers reached the South Pole a couple
   years before
   <a href="https://en.wikipedia.org/wiki/Amundsen%27s_South_Pole_expedition">Amundsen</a>,
   but left no trace?</li>
</ul>
<p>Spoiler alert! A lot of the fun of many of these stories is figuring
out the premise, because the perspective doesn't always make it
obvious from the beginning.</p>
<p>In The Author of the Acacia Seeds, either people actually figure out
how to study the writing of ants and penguins and so on, or it's sort
of a joke about the modern academy inventing the study of everything,
whether there's really anything there to study or not.</p>
<p>My favorite story is probably Solitude.</p>
<p>Recommended reading order: As printed, but then re-read the
introduction.</p>
<p><img alt="cover of The Unreal and The Real, Volume Two" src="cover_volume_two.jpg"></p>    
    ]]></description>
<link>http://planspace.org/20190129-unreal_and_the_real_volume_two/</link>
<guid>http://planspace.org/20190129-unreal_and_the_real_volume_two/</guid>
<pubDate>Tue, 29 Jan 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>Bird by Bird, by Anne Lamott</title>
<description><![CDATA[

<p><a href="https://smile.amazon.com/Bird-Some-Instructions-Writing-Life/dp/0385480016/">This</a>
is a charming short book containing "Some instructions on writing and
life."</p>
<p>It's very personal. Anne Lamott is cartoonishly neurotic and suggests
everyone else is too, which I've decided is nice.</p>
<p>She recommends index cards. I concur.</p>
<p>She mentions somehow that the population of the world is four billion.
I had to check the copyright date. It was 1994. Now in 2019 there are
7.7 billion people. Time flies!</p>
<p>Her writing glistens especially over short time scales. She is a
master of evocative two-item lists.</p>
<p>She has something to say (by proxy?) about not holding back:</p>
<blockquote>
<p>"Annie Dillard has said that day by day you have to give the work
before you all the best stuff you have, not saving up for later
projects. If you give freely, there will always be more."</p>
</blockquote>
<p>This is a phenomenon I've thought about in the context of breakdancing
competitions, and it is interesting to think about it also in writing,
and elsewhere.</p>
<p>Also she is very character-first. Plot comes from character, she says.</p>
<p><img alt="Bird by Bird (cover)" src="bird_by_bird_cover.jpg"></p>    
    ]]></description>
<link>http://planspace.org/20190128-bird_by_bird_by_anne_lamott/</link>
<guid>http://planspace.org/20190128-bird_by_bird_by_anne_lamott/</guid>
<pubDate>Mon, 28 Jan 2019 12:00:00 -0500</pubDate>
</item>
<item>
<title>The Expectant Father and so on</title>
<description><![CDATA[

<p>I read some baby books in 2018. I got a copy of <a href="https://smile.amazon.com/Expectant-Father-Ultimate-Dads-Be/dp/0789212137/">The Expectant Father</a>, and then I got <a href="https://smile.amazon.com/New-Father-Dads-Guide-First/dp/0789211777/">The New Father</a>, by the same author. I also got the <a href="https://smile.amazon.com/FAQ-Expectant-Fathers-Armin-Brott/dp/0789212692/">FAQ</a> <a href="https://smile.amazon.com/FAQ-New-Fathers-Armin-Brott/dp/0789212706/">versions</a>, thinking (mostly wrongly) that it would be fun to see the material in multiple-choice-question form. And Erica read <a href="https://smile.amazon.com/What-Expect-When-Youre-Expecting/dp/0761187480/">What to Expect When You're Expecting</a>, so I saw bits of that as well.</p>
<p>I have mixed feelings on these baby books. Some things you can't prepare for. I think a lot of baby books are sold just to make people feel better. It's like reading about dancing: you might learn something, but you won't become a great dancer with books alone.</p>
<p>As far as facts, there are lots that you'll care about with some lowish probability. Baby books can be like encyclopedias that way. And for nearly everything, if you don't know in advance, you'll find out when you need to know. You can learn in advance about <a href="https://en.wikipedia.org/wiki/Meconium">meconium</a>, or later as needed, or not at all. Regardless, the baby poops.</p>
<p>For example, information about induction turned out to be relevant for our family. I don't recall reading much about induction, maybe because I didn't think it would be so relevant. As it happened, the best preparation I had came not from a book but from an in-person session we did at our hospital. Regardless, we relied on the medical professionals at the hospital, and I think it would have been a big mistake to favor an opinion from elsewhere over our nurses and doctors, who did a great job.</p>
<p>There is good general advice, but the parts most people agree on are pretty well known: don't smoke, eat healthy, etc. I think I prefer <a href="/20181209-brain_rules_for_baby/">Brain Rules for Baby</a> over more conventional baby books for summarizing such advice.</p>
<p>There are two things in particular that I would have liked to be more prepared for:</p>
<ul>
<li>During delivery, pushing changes at the last moment, when it's most painful, just as the baby's head is about to pop out. All of a sudden you're supposed to basically stop pushing so they can try to ease the head out without tearing anything. I don't recall hearing about this in advance. Maybe not everybody does it this way. We got these surprise directions in the middle of what was already a very intense process, and everything worked out reasonably well, but I feel like we wouldn't have minded learning about this in advance.</li>
<li>Babies cry sometimes for no apparent reason. Sometimes for considerable time (even if less than the pseudoscientific definitions associated with "colic"). I knew that babies cry, of course, but nothing prepared me for the feeling of my own daughter crying inconsolably in my arms. I don't know how much it would have helped, but I think I would have liked to hear more advice like, "Sometimes your baby will cry no matter what you do. It will be painful, but here are some things you can try. It will be okay."</li>
</ul>
<p>I'm new to all this. I'm trying to learn as much as I can. You can always learn some things from books, and there are always some things you can't. For having a child, I am strongly impressed with how valuable social learning and direct experience are when stacked against the information for sale in books.</p>
<p><img alt="cover of The Expectant Father" src="expectant_father_cover.jpg"></p>    
    ]]></description>
<link>http://planspace.org/20181231-expectant_father/</link>
<guid>http://planspace.org/20181231-expectant_father/</guid>
<pubDate>Mon, 31 Dec 2018 12:00:00 -0500</pubDate>
</item>
  </channel>
</rss>
