# print(paste("highest", highest))
point_width <- point_width * sample_rate
point <- sine(point_freq, point_width, stereo=TRUE)
filter <- dnorm(seq_along(point), mean = length(point)/2, sd = length(point)/6)
filter <- filter / max(filter)
point <- point * filter
duration <- duration * sample_rate
# print(paste("duration", duration))
data_range <- highest - lowest
# print(paste("data_range", data_range))
left_offset <- value - lowest
# print(paste("left_offset", left_offset))
peak_position <- (left_offset / data_range) * duration
# print(paste("peak_position", peak_position))
left_padding_duration <- peak_position - length(point)/2
# print(paste("left_padding_duration", left_padding_duration))
if (left_padding_duration > 0) {
result <- bind(silence(left_padding_duration, stereo=TRUE), point)
} else {
result <- point[abs(left_padding_duration):length(point)]
}
if (length(result) < duration) {
result <- bind(result, silence(duration - length(result), stereo=TRUE))
} else {
result <- result[1:duration]
}
result
}
points_at <- function(values,  # data values
lowest,  # data range min
highest,  # data range max
duration,  # seconds
point_width,  # seconds for +/- 3 SD (points are normal)
point_freq=440, sample_rate=44100) {
result <- silence(duration * sample_rate, stereo = TRUE)
for (value in values) {
result <- result + point_at(value, lowest, highest, duration, point_width,
point_freq, sample_rate)
}
result
}
low_high <- function(values) {
breakpoints <- pretty(values)
lowest <- breakpoints[1]
highest <- breakpoints[length(breakpoints)]
c(lowest, highest)
}
ahist <- function(values,  # data values
duration=4,  # seconds
point_width=0.2,  # seconds for +/1 3 SD (points are normal)
point_freq=440, sample_rate=44100) {
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
content <- points_at(values, lowest, highest, duration, point_width,
point_freq, sample_rate)
edge <- sine(880, duration=1000, stereo=TRUE)
bind(edge, normalize(content), edge)
}
say_ahist <- function(values) {
duration <- 4
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
system(paste("say", duration, "seconds from", lowest, "to", highest, "-o t"))
system("ffmpeg -i t.aiff -f f32le -ar 44100 t.wav")
legend <- normalize(readWave("t.wav"))
system("rm t.aiff t.wav")
bind(legend, ahist(values))
}
x <- say_ahist(iris$Petal.Width)
say_ahist <- function(values) {
duration <- 4
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
system(paste("say", duration, "seconds from", lowest, "to", highest, "-o t"))
system("ffmpeg -i t.aiff -f pcm_f32be -ar 44100 t.wav")
legend <- normalize(readWave("t.wav"))
system("rm t.aiff t.wav")
bind(legend, ahist(values))
}
x <- say_ahist(iris$Petal.Width)
say_ahist <- function(values) {
duration <- 4
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
system(paste("say", duration, "seconds from", lowest, "to", highest, "-o t"))
system("ffmpeg -i t.aiff -f pcm_f32be -ar 44100 t.wav")
legend <- normalize(readWave("t.wav"))
system("rm t.aiff t.wav")
bind(legend, ahist(values))
}
x <- say_ahist(iris$Petal.Width)
say_ahist <- function(values) {
duration <- 4
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
system(paste("say", duration, "seconds from", lowest, "to", highest, "-o t"))
system("ffmpeg -i t.aiff -acodec f32be -ar 44100 t.wav")
legend <- normalize(readWave("t.wav"))
system("rm t.aiff t.wav")
bind(legend, ahist(values))
}
x <- say_ahist(iris$Petal.Width)
say_ahist <- function(values) {
duration <- 4
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
system(paste("say", duration, "seconds from", lowest, "to", highest, "-o t"))
system("ffmpeg -i t.aiff -acodec pcm_f32be -ar 44100 t.wav")
legend <- normalize(readWave("t.wav"))
system("rm t.aiff t.wav")
bind(legend, ahist(values))
}
x <- say_ahist(iris$Petal.Width)
sl <- ahist(iris$Sepal.Length)
legend(iris$Sepal.Length)
?legend
legend <- function(values) {
duration <- 4
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
system(paste("say", duration, "seconds from", lowest, "to", highest))
# system(paste("say", duration, "seconds from", lowest, "to", highest, "-o t"))
# system("ffmpeg -i t.aiff -acodec pcm_f32be -ar 44100 t.wav")
# legend <- normalize(readWave("t.wav"))
# system("rm t.aiff t.wav")
# bind(legend, ahist(values))
}
legend(iris$Sepal.Length)
play(sl)
legend_ahist <- function(values) {
w <- ahist(values)
legend(values)
play(w)
}
legend_ahist(iris$Petal.Length)
sl
?Wave
?sine
system("ffmpeg -i t.aiff -ar 44100 t.wav")
legend <- normalize(readWave("t.wav"))
bind(legend, sl)
legend
l <- normalize(legend, unit=1)
l <- normalize(legend, unit='l')
l <- normalize(legend, unit='1')
l
sl1 <- normalize(sl, unit="32")
x <- bind(legend, sl1)
sl1
l <- normalize(legend, pcm=FALSE)
l
bind(l, sl)
ll <- stereo(l, l)
x = bind(ll, sl)
play(x)
legend_ahist <- function(values) {
duration <- 4
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
system(paste("say", duration, "seconds from", lowest, "to", highest))
legend_mono <- normalize(readWave("t.wav"), pcm=FALSE)
legend <- stereo(legend_mono, legend_mono)
system("rm t.aiff t.wav")
bind(legend, ahist(values))
}
x <- legend_ahist(iris$Sepal.Length)
legend_ahist <- function(values) {
duration <- 4
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
system(paste("say", duration, "seconds from", lowest, "to", highest, "-o t"))
legend_mono <- normalize(readWave("t.wav"), pcm=FALSE)
legend <- stereo(legend_mono, legend_mono)
system("rm t.aiff t.wav")
bind(legend, ahist(values))
}
x <- legend_ahist(iris$Sepal.Length)
legend_ahist <- function(values) {
duration <- 4
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
system(paste("say", duration, "seconds from", lowest, "to", highest, "-o t"))
system("ffmpeg -i t.aiff -ar 44100 t.wav")
legend_mono <- normalize(readWave("t.wav"), pcm=FALSE)
legend <- stereo(legend_mono, legend_mono)
system("rm t.aiff t.wav")
bind(legend, ahist(values))
}
x <- legend_ahist(iris$Sepal.Length)
play(x)
ahist <- function(values,  # data values
duration=4,  # seconds
point_width=0.2,  # seconds for +/1 3 SD (points are normal)
point_freq=440, sample_rate=44100) {
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
content <- points_at(values, lowest, highest, duration, point_width,
point_freq, sample_rate)
normalize(content)
}
legend_ahist <- function(values,  # data values
duration=4,  # seconds
point_width=0.2,  # seconds for +/1 3 SD (points are normal)
point_freq=440, edge_freq=880, sample_rate=44100) {
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
system(paste("say", duration, "seconds from", lowest, "to", highest, "-o t"))
system("ffmpeg -i t.aiff -ar 44100 t.wav")
legend_mono <- normalize(readWave("t.wav"), pcm=FALSE)
legend <- stereo(legend_mono, legend_mono)
system("rm t.aiff t.wav")
content <- ahist(values, duration, point_width, point_freq, sample_rate)
edge <- sine(880, duration=1000, stereo=TRUE)
content <- bind(edge, content, edge)
bind(legend, content)
}
x <- legend_ahist(iris$Petal.Length)
play(x)
legend_ahist <- function(values,  # data values
duration=4,  # seconds
point_width=0.2,  # seconds for +/1 3 SD (points are normal)
point_freq=440,
edge=TRUE, edge_freq=880, edge_duration=1000,
sample_rate=44100) {
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
system(paste("say", duration, "seconds from", lowest, "to", highest, "-o t"))
system("ffmpeg -i t.aiff -ar 44100 t.wav")
legend_mono <- normalize(readWave("t.wav"), pcm=FALSE)
legend <- stereo(legend_mono, legend_mono)
system("rm t.aiff t.wav")
content <- ahist(values, duration, point_width, point_freq, sample_rate)
edge <- sine(edge_freq, duration=edge_duration, stereo=TRUE)
if (edge) {
content <- bind(edge, content, edge)
}
bind(legend, content)
}
x <- legend_ahist(iris$Petal.Length, edge=FALSE)
legend_ahist <- function(values,  # data values
duration=4,  # seconds
point_width=0.2,  # seconds for +/1 3 SD (points are normal)
point_freq=440,
edge=TRUE, edge_freq=880, edge_duration=1000,
sample_rate=44100) {
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
system(paste("say", duration, "seconds from", lowest, "to", highest, "-o t"))
system("ffmpeg -i t.aiff -ar 44100 t.wav")
legend_mono <- normalize(readWave("t.wav"), pcm=FALSE)
legend <- stereo(legend_mono, legend_mono)
system("rm t.aiff t.wav")
content <- ahist(values, duration, point_width, point_freq, sample_rate)
edge_sound <- sine(edge_freq, duration=edge_duration, stereo=TRUE)
if (edge) {
content <- bind(edge_sound, content, edge_sound)
}
bind(legend, content)
}
x <- legend_ahist(iris$Petal.Length, edge=FALSE)
play(x)
legend_ahist <- function(values,  # data values
duration=4,  # seconds
point_width=0.2,  # seconds for +/1 3 SD (points are normal)
point_freq=440,
legend=TRUE,
edge=TRUE, edge_freq=880, edge_duration=1000,
sample_rate=44100) {
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
content <- ahist(values, duration, point_width, point_freq, sample_rate)
edge_sound <- sine(edge_freq, duration=edge_duration, stereo=TRUE)
if (edge) {
content <- bind(edge_sound, content, edge_sound)
}
if (legend) {
system(paste("say", duration, "seconds from", lowest, "to", highest, "-o t"))
system("ffmpeg -i t.aiff -ar 44100 t.wav")
legend_mono <- normalize(readWave("t.wav"), pcm=FALSE)
legend_stereo <- stereo(legend_mono, legend_mono)
system("rm t.aiff t.wav")
content <- bind(legend_stereo, content)
}
content
}
x <- legend_ahist(iris$Petal.Length, edge=FALSE, legend=FALSE)
play(x)
y <- legend_ahist(iris$Petal.Length, edge=FALSE)
play(z)
play(y)
y <- legend_ahist(iris$Petal.Length)
play(y)
legend_ahist <- function(values,  # data values
main,  # "title" of variable
duration=4,  # seconds
point_width=0.2,  # seconds for +/1 3 SD (points are normal)
point_freq=440,
legend=TRUE,
edge=TRUE, edge_freq=880, edge_duration=1000,
sample_rate=44100) {
if (missing(main)) {
main <- deparse(substitute(values))
}
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
content <- ahist(values, duration, point_width, point_freq, sample_rate)
edge_sound <- sine(edge_freq, duration=edge_duration, stereo=TRUE)
if (edge) {
content <- bind(edge_sound, content, edge_sound)
}
if (legend) {
system(paste("say", main, "in", duration, "seconds from", lowest, "to", highest, "-o t"))
system("ffmpeg -i t.aiff -ar 44100 t.wav")
legend_mono <- normalize(readWave("t.wav"), pcm=FALSE)
legend_stereo <- stereo(legend_mono, legend_mono)
system("rm t.aiff t.wav")
content <- bind(legend_stereo, content)
}
content
}
y <- legend_ahist(iris$Petal.Length)
play(y)
y <- legend_ahist(iris$Petal.Length, main="petal length")
play(y)
z <- legend_ahist(iris$Petal.Length, main="petal length", point_width=0.1)
play(z)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
sw <- legend_ahist(iris$Sepal.Width, main="sepal width")
sl <- legend_ahist(iris$Sepal.Length, main="sepal length")
pl <- legend_ahist(iris$Petal.Length, main="petal length")
pw <- legend_ahist(iris$Petal.Width, main="petal width")
sw <- legend_ahist(iris$Sepal.Width, main="sepal width")
play(sw)
play(sl)
play(pl)
play(pw)
hist(iris$Petal.Width)
play(pw)
hist(iris$Petal.Length)
play(pl)
play(sl)
hist(iris$Sepal.Length)
play(sl)
play(sw)
hist(iris$Sepal.Width)
play(sw)
hist(iris$Sepal.Width, main="sepal width")
hist(iris$Petal.Width, main="petal width")
play(pw)
setwd("~/ajschumacher.github.io/20151212-hearing_data/")
library("tuneR")
setWavPlayer('/usr/bin/afplay')  # on Mac
point_at <- function(value,  # data value
lowest,  # data range min
highest,  # data range max
duration,  # seconds
point_width,  # seconds for +/- 3 SD (points are normal)
point_freq=440, sample_rate=44100) {
point_width <- point_width * sample_rate
point <- sine(point_freq, point_width, stereo=TRUE)
filter <- dnorm(seq_along(point), mean = length(point)/2, sd = length(point)/6)
filter <- filter / max(filter)
point <- point * filter
duration <- duration * sample_rate
data_range <- highest - lowest
left_offset <- value - lowest
peak_position <- (left_offset / data_range) * duration
left_padding_duration <- peak_position - length(point)/2
if (left_padding_duration > 0) {
result <- bind(silence(left_padding_duration, stereo=TRUE), point)
} else {
result <- point[abs(left_padding_duration):length(point)]
}
if (length(result) < duration) {
result <- bind(result, silence(duration - length(result), stereo=TRUE))
} else {
result <- result[1:duration]
}
result
}
point_at <- function(value,  # data value
lowest,  # data range min
highest,  # data range max
duration,  # seconds
point_width,  # seconds for +/- 3 SD (points are normal)
point_freq=440, sample_rate=44100) {
point_width <- point_width * sample_rate
point <- sine(point_freq, point_width, stereo=TRUE)
filter <- dnorm(seq_along(point), mean = length(point)/2, sd = length(point)/6)
filter <- filter / max(filter)
point <- point * filter
duration <- duration * sample_rate
data_range <- highest - lowest
left_offset <- value - lowest
peak_position <- (left_offset / data_range) * duration
left_padding_duration <- peak_position - length(point)/2
if (left_padding_duration > 0) {
result <- bind(silence(left_padding_duration, stereo=TRUE), point)
} else {
result <- point[abs(left_padding_duration):length(point)]
}
if (length(result) < duration) {
result <- bind(result, silence(duration - length(result), stereo=TRUE))
} else {
result <- result[1:duration]
}
result
}
points_at <- function(values,  # data values
lowest,  # data range min
highest,  # data range max
duration,  # seconds
point_width,  # seconds for +/- 3 SD (points are normal)
point_freq=440, sample_rate=44100) {
result <- silence(duration * sample_rate, stereo = TRUE)
for (value in values) {
result <- result + point_at(value, lowest, highest, duration, point_width,
point_freq, sample_rate)
}
result
}
low_high <- function(values) {
breakpoints <- pretty(values)
lowest <- breakpoints[1]
highest <- breakpoints[length(breakpoints)]
c(lowest, highest)
}
normalized_audio_hist <- function(values,  # data values
duration=4,  # seconds
point_width=0.2,  # seconds for +/1 3 SD (points are normal)
point_freq=440, sample_rate=44100) {
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
content <- points_at(values, lowest, highest, duration, point_width,
point_freq, sample_rate)
normalize(content)
}
ahist <- function(values,  # data values
main,  # "title" of variable
duration=4,  # seconds
point_width=0.2,  # seconds for +/1 3 SD (points are normal)
point_freq=440,
legend=TRUE,
edge=TRUE, edge_freq=880, edge_duration=1000,
sample_rate=44100) {
if (missing(main)) {
main <- deparse(substitute(values))
}
breakpoints <- low_high(values)
lowest <- breakpoints[1]
highest <- breakpoints[2]
content <- normalized_audio_hist(values, duration, point_width, point_freq, sample_rate)
edge_sound <- sine(edge_freq, duration=edge_duration, stereo=TRUE)
if (edge) {
content <- bind(edge_sound, content, edge_sound)
}
if (legend) {
system(paste("say", main, "in", duration, "seconds from", lowest, "to", highest, "-o t"))
system("ffmpeg -i t.aiff -ar 44100 t.wav")
legend_mono <- normalize(readWave("t.wav"), pcm=FALSE)
legend_stereo <- stereo(legend_mono, legend_mono)
system("rm t.aiff t.wav")
content <- bind(legend_stereo, content)
}
content
}
sw <- ahist(iris$Sepal.Width, main="sepal width")
play(sw)
hist(iris$Sepal.Width, main="sepal width")
sl <- legend_ahist(iris$Sepal.Length, main="sepal length")
sl <- ahist(iris$Sepal.Length, main="sepal length")
pl <- ahist(iris$Petal.Length, main="petal length")
pw <- ahist(iris$Petal.Width, main="petal width")
hist(iris$Sepal.Length, main="sepal length")
play(sl)
hist(iris$Petal.Length, main="petal length")
play(pl)
hist(iris$Petal.Width, main="petal width")
play(pw)
hist(iris$Sepal.Length)
hist(iris$Sepal.Length)
hist(iris$Sepal.Length)
plot(density(iris$Sepal.Length))
viewer <- getOption("viewer")
viewer("http://wikipedia.org/")
install.packages("httpuv")
viewer("http://wikipedia.org/")
viewer("https://upload.wikimedia.org/wikipedia/commons/4/41/Iris_versicolor_3.jpg")
viewer <- getOption("viewer")
viewer("https://upload.wikimedia.org/wikipedia/commons/4/41/Iris_versicolor_3.jpg")
library("httpuv")
viewer <- getOption("viewer")
viewer("https://upload.wikimedia.org/wikipedia/commons/4/41/Iris_versicolor_3.jpg")
viewer
